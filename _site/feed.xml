<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Jordan - Blog</title>
    <description>Welcome to my blog. I am a Resident Apprentice at 8th Light in London.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 29 Mar 2015 16:17:51 +0100</pubDate>
    <lastBuildDate>Sun, 29 Mar 2015 16:17:51 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Developing C# with vim on OSX</title>
        <description>&lt;h2 id=&quot;developing-c-with-vim-on-osx&quot;&gt;Developing C# with vim on OSX&lt;/h2&gt;
&lt;p&gt;This guide will explain how I have setup a C# development environment using vim on OSX.&lt;/p&gt;

&lt;h1 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h1&gt;
&lt;p&gt;The following need to be installed onto your computer beforehand.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.mono-project.com/&quot;&gt;Mono&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python 2.7&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;vim-setup&quot;&gt;Vim setup&lt;/h1&gt;

&lt;p&gt;We’ll be heavily using &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vim#installation&quot;&gt;omnisharp-vim&lt;/a&gt; in this guide.. This plugin provides a huge amount of features that facilitates C# development. To make full use of the features that omnisharp has to offer, the following plugins are needed;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;ctrlp&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;Syntastic&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tpope/vim-dispatch&quot;&gt;vim-dispatch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ervandew/supertab&quot;&gt;supertab&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;configuring-omnisharp-to-run-tests-with-nunit&quot;&gt;Configuring omnisharp to run tests with nunit&lt;/h1&gt;
&lt;p&gt;From the time of writing this, omnisharp is configured to expect &lt;code&gt;nunit-console.exe&lt;/code&gt; in your path somewhere. If this isn’t on your path, the nunit tests will silently fail to run. You have a choice with how to fix this;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the omnisharp plugin configuration and change the test command from using &lt;code&gt;nunit-console.exe&lt;/code&gt; to &lt;code&gt;nunit-console4&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In a directory that is on your path, create a symlink from nunit-console.exe to /Library/Frameworks/Mono.framework/Commands/nunit-console4&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personally, I prefer the second option as it gives me the freedom to reinstall the plugin if necessary without having to dig into the configuration. Furthermore, the &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-server/blob/0fc2fab6c44a19c6555248aa903c1e076afbd865/OmniSharp/config.json#L10&quot;&gt;location&lt;/a&gt; where the config.json is said to be stored is now out of date, and it is unclear which config.json in the plgunis directory structure you should use.&lt;/p&gt;

&lt;h1 id=&quot;configuring-vim-with-omnisharp-shortcuts&quot;&gt;Configuring vim with omnisharp shortcuts&lt;/h1&gt;
&lt;p&gt;You now have everything needed to open up a C# project in vim and be able to invoke omnisharp functions. However, you’ll need to make some amendments to your vim setup first to add some useful shortcuts. I would advise that you create a &lt;a href=&quot;http://vim.wikia.com/wiki/File_type_plugins&quot;&gt;file type plugin&lt;/a&gt; to dump this configuration into, so you can keep your .vimrc devoid of all of this c# configuration. Here’s what I’ve used, which I’ve yanked and slightly modified from &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vim#example-vimrc&quot;&gt;here&lt;/a&gt; to improve performance. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;OmniSharp won&amp;#39;t work without this setting&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tabstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shiftwidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expandtab&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;Showmatch significantly slows down omnicomplete&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;when the first match contains parentheses.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;noshowmatch&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;Super tab settings&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabDefaultCompletionType &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;context&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabContextDefaultCompletionType &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabDefaultCompletionTypeDiscovery &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;omnifunc:&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;completefunc:&amp;lt;c-x&amp;gt;&amp;lt;c-n&amp;gt;&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabClosePreviewOnPopupClose &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;don&amp;#39;t autoselect first item in omnicomplete, show if only one item (for preview)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;remove preview if you don&amp;#39;t want to see any documentation whatsoever.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;completeopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;longest&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;menuone&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;preview

&lt;span class=&quot;c&quot;&gt;&amp;quot;Move the preview window (code documentation) to the bottom of the screen, so it doesn&amp;#39;t move the code!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;You might also want to look at the echodoc plugin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;splitbelow&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Get Code Issues and syntax errors&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:syntastic_cs_checkers &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s1&quot;&gt;&amp;#39;syntax&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;semantic&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;issues&amp;#39;&lt;/span&gt;]

&lt;span class=&quot;c&quot;&gt;&amp;quot;Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;omnifunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;OmniSharp#Complete

&lt;span class=&quot;c&quot;&gt;&amp;quot; Synchronous build (blocks Vim)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:OmniSharpBuild&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Builds can also run asynchronously with vim-dispatch installed&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;b&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:OmniSharpBuildAsync&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; automatic syntax check on events (TextChanged requires Vim 7.4)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; SyntasticCheck
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; SyntasticSetLoclist

&lt;span class=&quot;c&quot;&gt;&amp;quot; Automatically add new cs files to the nearest project on save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; OmniSharp#AddToProject&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;The following commands are contextual, based on the current cursor position.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gd&lt;/span&gt; :OmniSharpGotoDefinition&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt; :OmniSharpFindImplementations&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ft&lt;/span&gt; :OmniSharpFindType&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fs&lt;/span&gt; :OmniSharpFindSymbol&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fu&lt;/span&gt; :OmniSharpFindUsages&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;finds members in the current buffer&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;fm :OmniSharpFindMembers&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;cursor can be anywhere on the line containing an issue&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt;  :OmniSharpFixIssue&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;fx :OmniSharpFixUsings&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;tt :OmniSharpTypeLookup&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;dc :OmniSharpDocumentation&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;rt :OmniSharpRunTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;rf :OmniSharpRunTestFixture&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ra :OmniSharpRunAllTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rl&lt;/span&gt; :OmniSharpRunLastTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Remove &amp;#39;Press Enter to continue&amp;#39; message when type information is longer than one line.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cmdheight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Contextual code actions (requires CtrlP or unite.vim)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ca :OmniSharpGetCodeActions&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Run code actions with text selected in visual mode to extract method&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;vnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ca :&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; OmniSharp#GetCodeActions&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;visual&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;&amp;quot; rename with dialog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;nnoremap &amp;lt;leader&amp;gt;nm :OmniSharpRename&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;nnoremap &amp;lt;F2&amp;gt; :OmniSharpRename&amp;lt;cr&amp;gt;:wa&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F2&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :OmniSharpRename&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; rename without dialog - with cursor on the symbol to rename... &amp;#39;:Rename newname&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;command! -nargs=1 Rename :call OmniSharp#RenameTo(&amp;quot;&amp;lt;args&amp;gt;&amp;quot;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Force OmniSharp to reload the solution. Useful when switching branches etc.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rl&lt;/span&gt; :OmniSharpReloadSolution&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cf&lt;/span&gt; :OmniSharpCodeFormat&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Load the current .cs file to the nearest project&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tp&lt;/span&gt; :OmniSharpAddToProject&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ss&lt;/span&gt; :OmniSharpStartServer&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sp&lt;/span&gt; :OmniSharpStopServer&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Add syntax highlighting for types and interfaces&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;th&lt;/span&gt; :OmniSharpHighlightTypes&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;Don&amp;#39;t ask to save when changing buffers (i.e. when jumping to a type definition)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;extract text selected in visual mode as variable&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;vnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ev cvariable&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;O&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;pIvar variable &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;A;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;==&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F2&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;setting-up-a-c-project&quot;&gt;Setting up a C# project&lt;/h1&gt;
&lt;p&gt;To setup a C# project without relying on visual studio/xamarin studio, we can use &lt;a href=&quot;https://github.com/nosami/grunt-init-csharpsolution&quot;&gt;grunt-init-csharpsolution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Creating a project is then as straight forward as navigating to an empty directory, and performing the following;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;grunt-init csharpsolution&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;nuget restore&lt;/code&gt; to install any dependencies&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-functionality-has-been-added&quot;&gt;What functionality has been added&lt;/h1&gt;
&lt;p&gt;Now that we have this all setup, what does all of this give us? Provided you have followed all of these instructions, we now have&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tab Autocomplete, which also shows which parameters a particular function expects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Project wide refactor. Press F2 to change a class/function/variable name and it’ll rename all instances in your project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asynchronous test runner. In a nunit test, either press &lt;code&gt;,ra&lt;/code&gt; to run all tests, &lt;code&gt;,rf&lt;/code&gt; to run all tests in a particular fixture, or &lt;code&gt;,rt&lt;/code&gt; to run a single test. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Context aware code actions. If you have configured Syntastic to work, you can hover over code shaded red/blue (which is Syntastic that indicating something is wrong), &lt;code&gt;,ca&lt;/code&gt; will provide ways you can fix this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to classes/functions using &lt;code&gt;gd&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These features have allowed me to come up with a pretty decent workflow for writing C# using vim. I would strongly recommend that you read through the omnisharp documentation to find out everything this great plugin has to offer.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/vim/2015/03/25/vim-with-c-sharp.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/2015/03/25/vim-with-c-sharp.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Packaging Principles - Coupling</title>
        <description>&lt;h1 id=&quot;package-coupling&quot;&gt;Package Coupling&lt;/h1&gt;
&lt;p&gt;When we create software components in the form of Java Jars, C# DLLs or Ruby gems, the two most important things that we want to get out of it are;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The ability to reuse components.&lt;/li&gt;
  &lt;li&gt;The ability to change components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reusable components are crucial to any software development team that wants to remain efficient. I’ve worked on projects where we have been able to put together new software applications that are mostly composed on existing components. This saves a lot of work when done right.&lt;/p&gt;

&lt;p&gt;There are three package coupling principles which I will go through in this blog post; The Acyclic Dependency Principle, the Stable Dependency Principle and the Stable Abstraction Principle.&lt;/p&gt;

&lt;h2 id=&quot;the-acyclic-dependency-principle&quot;&gt;The Acyclic Dependency Principle&lt;/h2&gt;
&lt;p&gt;The Acycling Dependency Principle (ADP) says that if component A depends on component B, component B will not have any transitive dependencies on component A.
I didn’t know that it was possible to violate this principle. With Java/Maven, you are (as far as I’m aware) not able to have any circular dependencies.&lt;/p&gt;

&lt;p&gt;Say we had the following contrived dependency structure;&lt;/p&gt;

&lt;p&gt;UserInterface -&amp;gt; Accounting -&amp;gt; StringUtils -&amp;gt; UserInterface&lt;/p&gt;

&lt;p&gt;If we were testing the Account component which handles business logic/accounting rules, we’d need to depend on StringUtils.&lt;/p&gt;

&lt;p&gt;Unfortunately, StringUtils is going to pull in the UserInterface dependencies too. So what is wrong with this?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Compile times are going to increase, you now have to compile UserInterface (and all of its dependencies) whenever you compile Accounting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you deploy the Accounting module, you will need to have the UserInterface component build for it to reference too.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are not able to yank out the Accounting component to reuse on a different application without Accounting carrying around its extra baggage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-stable-dependency-principle&quot;&gt;The Stable Dependency Principle&lt;/h2&gt;
&lt;p&gt;When we are talking about components, stability is how easy it is to change a component. It does not have anything to do with how buggy the component may be. One metaphor that Uncle Bob uses is a coin balancing on a table. This can be said to be unstable, you are easily able to change its state. The table on the other hand is sturdy, and is harder to change the state. Therefore, you can say the table is more stable than the coin.&lt;/p&gt;

&lt;p&gt;Going back to software, any component that has lots of components depending on it will be stable.&lt;/p&gt;

&lt;p&gt;If we had components X, Y and Z depending on A;&lt;/p&gt;

&lt;p&gt;(X, Y, Z) -&amp;gt; A&lt;/p&gt;

&lt;p&gt;A cannot change without cooperating with X, Y and Z, otherwise any change to A could break these components.&lt;/p&gt;

&lt;p&gt;So how do we have reusable components that can react to change? The answer is to only depend on more stable components, and that is the crux of the Stable Dependency Principle.&lt;/p&gt;

&lt;p&gt;Components which we expect to undergo many changes should have a minimum number of components depending on them. Components which we do not expect to change can have many components depending on them.&lt;/p&gt;

&lt;p&gt;How we know which components should be more stable is what the next principle refers to.&lt;/p&gt;

&lt;h2 id=&quot;the-stable-abstraction-principle&quot;&gt;The Stable Abstraction Principle&lt;/h2&gt;
&lt;p&gt;Lets say we had a class A that implements some interface. It should be obvious to say that we would expect more changes to occur in class A compared to the interface. Afterall, the interface is where high level abstractions reside and these abstractions tend to change less than their concrete implementations.&lt;/p&gt;

&lt;p&gt;With software components, the Stable Abstraction Principle states that a component should be as stable as it is abstract.&lt;/p&gt;

&lt;p&gt;Abstract interfaces change less frequently than their concrete implementations, so we want the concrete implementations to depend on the abstractions.&lt;/p&gt;

&lt;p&gt;The advantage of this is that components that are highly depended upon are more abstract and therefore undergo less frequent changes. Components that are more concrete have less dependencies and therefore can change with more ease.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/2015/03/24/package-coupling.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/24/package-coupling.html</guid>
        
        
      </item>
    
      <item>
        <title>Vim Projectionist</title>
        <description>&lt;p&gt;Vim: Projectionist&lt;/p&gt;

&lt;p&gt;A really useful plugin that I have recently been working with is &lt;a href=&quot;https://github.com/tpope/vim-projectionist&quot;&gt;vim projectionist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What makes this particularly useful is the ability to quickly navigate to what it calls are “alternate” files.&lt;/p&gt;

&lt;p&gt;For e.g., I can open up a file lib/my_class.rb - type :A and it will navigate to spec/my_class_spec.rb. Beforehand, I would make heavy use of NERDTree/Ctrl-P to open new files.&lt;/p&gt;

&lt;p&gt;Instead of :A, you can type :AS (open up the alternate file in a horizontal split), :AV (vertical split), or :AT (new tab).&lt;/p&gt;

&lt;p&gt;There’s other things you can do as well. If you use &lt;a href=&quot;https://github.com/tpope/vim-dispatch&quot;&gt;vim dispatch&lt;/a&gt;, you can set default dispatch tasks.&lt;/p&gt;

&lt;p&gt;Here is .projections.json file I have configured for a ruby project;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;make&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rake&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;spec/*_spec.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;dispatch&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rspec {file}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/{}.rb&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;lib/*.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;spec/{}_spec.rb&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I’m on a file under &lt;code&gt;spec&lt;/code&gt; and I run &lt;code&gt;Dispatch&lt;/code&gt;, it’ll run rspec on the current file. If I’m on some production code under &lt;code&gt;lib&lt;/code&gt;, it’ll run the dispatch task on the alternate file, which in this case will run rspec on the spec.&lt;/p&gt;

&lt;p&gt;You can also setup tasks that start when a file is opened, i.e. &lt;code&gt;rails server&lt;/code&gt; if you are working on a rails project.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/vim/2015/03/23/projectionist.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/2015/03/23/projectionist.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Wrap external libraries</title>
        <description>&lt;p&gt;The other week, I was working on some JavaScript and needed to store some data on the client side, so I opted to use JQuery to save cookies rather than invent my own cookie storing mechanism.&lt;/p&gt;

&lt;p&gt;It transpired that cookies weren’t right for this task. What I needed was for each tab a user opened to have its own storage cache. &lt;/p&gt;

&lt;p&gt;I had to use SessionStorage instead, which does not persist data across different tabs.&lt;/p&gt;

&lt;p&gt;I was expecting this to be a laborious task as I had used cookies extensively in my web app. Yet, it was an insanely fast task. How?&lt;/p&gt;

&lt;p&gt;I had put the JQuery cookie methods in a separate &lt;code&gt;Storage&lt;/code&gt; class, which had the following methods;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Storage&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;storeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I only had to change two lines of production code to change the storage mechanism for the entire site.&lt;/p&gt;

&lt;p&gt;I’ve done this far more lately. Wrapping any functions (third party or otherwise) that are called in several places in a class/helper function really helps when we have to change something.&lt;/p&gt;

&lt;p&gt;Only having to change one method like this is very satisfying and saves a lot of time.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/software/2015/03/19/wrap-external-calls.html</link>
        <guid isPermaLink="true">http://yourdomain.com/software/2015/03/19/wrap-external-calls.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>A tip to improve your vim</title>
        <description>&lt;p&gt;I was doing the coin change kata the other week, and one of the bits of feedback I received was that my Vim skills needed work.&lt;/p&gt;

&lt;p&gt;I thought my vim skills were okay, but I was actually using the H,J,K,L keys far too much. I was traversing documents just using k (up) and j (down) keys.&lt;/p&gt;

&lt;p&gt;Now, I have configured my Mac to repeat keys quickly when I hold the key down. However, vim provides many other ways to navigate around a document.&lt;/p&gt;

&lt;p&gt;So how do you get out of the habit of using H,J,K, L? It’s easy, disable those keys (temporarily). Now you can’t use them, you are forced to find other habits.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nnoremap h &lt;nop&gt;&amp;lt;/code&amp;gt;
&lt;code&gt;nnoremap j &lt;nop&gt;&amp;lt;/code&amp;gt;
&lt;code&gt;nnoremap k &lt;nop&gt;&amp;lt;/code&amp;gt;
&lt;code&gt;nnoremap l &lt;nop&gt;&amp;lt;/code&amp;gt;&lt;/nop&gt;&lt;/code&gt;&lt;/nop&gt;&lt;/code&gt;&lt;/nop&gt;&lt;/code&gt;&lt;/nop&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And habit is the key word here. I disabled these during a Friday afternoon, and I quickly had to change habits that I have since kept.&lt;/p&gt;

&lt;p&gt;These are crucial keys, it’s not practical to never use these keys. However they should only be used for one-off movements.&lt;/p&gt;

&lt;p&gt;Instead of using these keys, use;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;f/F to move to a character on a line&lt;/li&gt;
  &lt;li&gt;w/b to move back and forward a word&lt;/li&gt;
  &lt;li&gt;G5 to move to the 5th line, or use :5&lt;cr&gt;&lt;/cr&gt;&lt;/li&gt;
  &lt;li&gt;{,} to move one paragraph (which usually translates to a function)&lt;/li&gt;
  &lt;li&gt;/,? to find text to navigate to&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 17 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/vim/2015/03/17/vim_improvement.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/2015/03/17/vim_improvement.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>How I violated the Interface Segregation Principle</title>
        <description>&lt;p&gt;Over the past few days I’ve been studying the SOLID principles, by watching the Clean Code videos as well as reading Principles, Patterns And Practices by Uncle Bob.&lt;/p&gt;

&lt;p&gt;Although I’ve known about the SOLID principles for quite some time, I never realised quite how far and wide the principles reach when you are writing code.&lt;/p&gt;

&lt;p&gt;For my first attempt at TicTacToe in Ruby, my code underwent many changes as new features were added. In hindsight, I did a poor job in keeping the abstractions correct as more features were added, and I ended up violating violating some of the SOLID principles in certain areas.&lt;/p&gt;

&lt;p&gt;In this post, I’ll describe how I violated the Interface Segregation Principle (ISP).&lt;/p&gt;

&lt;p&gt;ISP tells us that no classes should be forced to depend on methods it does not use.&lt;/p&gt;

&lt;p&gt;When you override a method in an interface to only return a null response, or throw a &lt;code&gt;NotToBeUsedException&lt;/code&gt; of some sort, you could be violating ISP.&lt;/p&gt;

&lt;p&gt;Initially, my TicTacToe used a CommandLineInterface, so I had an interface that looked like this;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This worked fine for my CommandLineInterface, as when it was the human players turn, we requested that they enter their move.&lt;/p&gt;

&lt;p&gt;The next feature came along to add a GUI client. I reused this interface, but did the following;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOVE_NOT_AVAILABLE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is undoubtedly a hack. With a GUI client, moves are not requested by the user, but instead the user submits a move when they are ready. The user drives the game forward and we used an event driven architecture to achieve this by using another function.&lt;/p&gt;

&lt;p&gt;The point is that CommandLineInterface and GUIInterface do not share the same behaviour all of the same behaviour. The GUI client is event driven with asynchronous behaviour, whereas the Command Line is a synchronous client which blocks the control flow when the user move is requested.&lt;/p&gt;

&lt;p&gt;So, how would we fix this? One way could be that we need two interfaces;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;synchronousInterface&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInterface&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have segregated the interfaces, the GUI interface can implement methods only included in the &lt;code&gt;UserInterface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ISP goes further than only overriding the required methods in an interface. Whenever you have some code that is forced to do something it doesn’t need to do, you could be violating ISP. This could be having to pass in parameters to a method that the method doesn’t require, or passing an unused parameter in a constructor.&lt;/p&gt;

&lt;p&gt;Hacks are easy things to do, especially when you’re in the zone and are just trying to get something working. The problem is they add up, and will add unnecessary confusion.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/interface/segregation/principle/2015/03/16/isp-violation.html</link>
        <guid isPermaLink="true">http://yourdomain.com/interface/segregation/principle/2015/03/16/isp-violation.html</guid>
        
        
        <category>interface</category>
        
        <category>segregation</category>
        
        <category>principle</category>
        
      </item>
    
      <item>
        <title>To Mock Or To Stub</title>
        <description>&lt;p&gt;When it comes to unit testing an object that has collaborators, it is necessary to use either a mock or a stub.&lt;/p&gt;

&lt;p&gt;What’s the difference? A stub is an object that returns some data. It does not have any assertion logic built into it. A mock on the other hand contains assertion logic, and is usually automatically evaluated at the end of a unit test. We will also mention spys, which are objects that record method invocations but doesn’t contain any assertion logic.&lt;/p&gt;

&lt;p&gt;The simple rule of thumb that I follow is this;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When your object is requesting data from a collaborator, stub that response. You needn’t check that it was called in your unit test. Presumably, you are calling this object in order to change some state in the object you are testing. That change of state is what you should be testing.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When your object is invoking a command against a collaborator, mock that object and assert that the method invocation was made with the correct arguments.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In other words, use stubs for inbound messages to the object under test, and mocks for outbound.&lt;/p&gt;

&lt;p&gt;What if we have a collaborator where we have both outbound and inbound messages going to and from the object under test. This sounds a little complex, and could indicate a code smell (maybe Tell, Don’t Ask was violated). Nonetheless, this situation can arise. There are three options you have;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Mock the behaviour in your unit test using a mocking library like JMock. The issue with this is you’ll tightly couple your test to the implementation of the complex collaborator. The slightest change to the collaborator will break this unit test. You’ll be in a world of pain if you’ve mocked this collaborator in multiple tests in this way.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create a hand made stub/spy that mirrors your collaborator in your unit tests, make the assertions in your unit test to check that the object was called correctly. This hand made mock can be reused across multiple unit tests. If the collaborator were to change, only the hand made objec needs to change. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use the real object in your test. I have used this approach with my TicTacToe, where I used a real &lt;code&gt;Game&lt;/code&gt; object when testing my &lt;code&gt;UserInterface&lt;/code&gt; class. The advantage with this is there’s no mock object tightly coupled to your collaborator. You can make assertions against the object under test, and the collaborator that it was interacted with correctly.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ultimately, what we are striving for are unit tests that are not tightly coupled to the implemenation. On the other hand, coupling the tests to the interfaces of the collaborators is, in my opinion, okay. We have to test those interactions, yet because interfaces tend to change less frequently compared to the implementation details of those collaborators, our tests should be easier to change at a later date.&lt;/p&gt;
</description>
        <pubDate>Fri, 13 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/mock/stub/2015/03/13/mocking-vs-stubbing.html</link>
        <guid isPermaLink="true">http://yourdomain.com/mock/stub/2015/03/13/mocking-vs-stubbing.html</guid>
        
        
        <category>mock</category>
        
        <category>stub</category>
        
      </item>
    
      <item>
        <title>Software Development: Rushing will only slow you down</title>
        <description>&lt;p&gt;The other day I was watching a painting competition on TV (I know, my coolness knows no bounds). I must stress that my artistic skills are horrific, and I know next to nothing about art or painting.  You may be wondering why I’m going on about painting on a blog that is a purveyor of (what I hope are) helpful software articles.&lt;/p&gt;

&lt;p&gt;The contestants had to paint a picture of some sort in a given time, and were judged on their efforts afterwards. One thing that really struct me was that when they were approaching the end of their allocated time, the painters were not rushing even though some still had a lot of work to do.&lt;/p&gt;

&lt;p&gt;As I’ve already mentioned, I’m no artist, yet rushing something typically equates to abandoning some level of care in order to complete a task. Had they have rushed, there would’ve been parts of the painting that look obviously worse than areas where more care was given.&lt;/p&gt;

&lt;p&gt;Coming back to software development where are allocated time is usually a week, we can sometimes pack in more work than is anticipated. There are times where I have rushed, and I can categorically admit that every time has caused me pain. &lt;/p&gt;

&lt;p&gt;When you are rushing to develop a software application, you are only concerned with one thing; get the tests passing and the features complete. Good code however takes time; time to refactor large functions into smaller functions, time to get the right abstractions in place, time to make the code coherent and easy to read. The time spent doing those things makes your code far easier to work with at a later date. &lt;/p&gt;

&lt;p&gt;Code that is rushed is harder to maintain because maintainability wasn’t a concern to the developer whom was under pressure to deliver. Say you do rush and you managed to deliver something that worked but the code was not up to scratch, there is a very good chance you’ll be coming back to that rushed code in the very near future. That code is more likely to be harder to work with, and could potentially be thwart with design issues that’ll really affect your productivity for subsequent iterations.&lt;/p&gt;

&lt;p&gt;Delivery managers will not agree with this, but when it comes to software development; take your time. Think about the best way to do something. What design would be best. Research ways to improve your productivity. Your code will be easier (and ultimately faster) to work with. You’ll gain that time back at a later date.&lt;/p&gt;
</description>
        <pubDate>Wed, 11 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/rushing/2015/03/11/never-rush.html</link>
        <guid isPermaLink="true">http://yourdomain.com/rushing/2015/03/11/never-rush.html</guid>
        
        
        <category>rushing</category>
        
      </item>
    
      <item>
        <title>JavaScript: Module Pattern</title>
        <description>&lt;p&gt;During the last week, I have been writing pure JavaScript for the first time. I used to rely on third-party libraries/frameworks like AngularJS and JQuery.&lt;/p&gt;

&lt;p&gt;I was fairly happy with my initial attempt, and had used prototypes to define several objects.&lt;/p&gt;

&lt;p&gt;However, having read the book &lt;strong&gt;JavaScript: The Good Parts&lt;/strong&gt; and studying the JavaScript language a little more, I am now seriously unhappy with my code having reviewed it.&lt;/p&gt;

&lt;p&gt;The major problems I have with it is that some functions are declared in the global namespace which causes odd behaviour when you have methods with the same name. My codebase is fairly small, and I still experienced conflicts with my code.&lt;/p&gt;

&lt;p&gt;The easiest way to avoid the global namespace is to use the module pattern. I won’t go into detail here on how it works, as there are far better resources out there that explain it very well indeed.&lt;/p&gt;

&lt;p&gt;The crux of the module pattern is to use anonymous, immediately executed javascript functions that return the object that you want to create.&lt;/p&gt;

&lt;p&gt;The following code is plagiarized from &lt;a href=&quot;http://www.adequatelygood.com/JavaScript-Module-Pattern-In-Depth.html&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;MODULE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;privateVariable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;privateMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moduleProperty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moduleMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;my&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The advantage of this pattern is having objects with private methods and their own internal state.&lt;/p&gt;

&lt;p&gt;CoffeeScript does something similar when it compiles down to JavaScript.&lt;/p&gt;

&lt;p&gt;This is a pattern I can see myself using from now on, and does solve what is a nasty design flaw in JavaScript which is the global namespace&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/javascript/module/pattern/2015/03/03/javascript-modules.html</link>
        <guid isPermaLink="true">http://yourdomain.com/javascript/module/pattern/2015/03/03/javascript-modules.html</guid>
        
        
        <category>javascript</category>
        
        <category>module</category>
        
        <category>pattern</category>
        
      </item>
    
      <item>
        <title>Ruby and Rack: Working with session</title>
        <description>&lt;p&gt;Rack is a very simple web server interface which you can use to build small web apps. One of the things that I really like about Rack is how minimalistic it is, which makes it a lot less intimidating than other web frameworks (e.g. rails)&lt;/p&gt;

&lt;p&gt;This post will include a very small example on working with Rack’s session and how to unit test that the session has the correct values. &lt;/p&gt;

&lt;p&gt;To write unit tests for rack, you need to include &lt;code&gt;Rack::Test::Methods&lt;/code&gt;. This provides several useful utility methods to test your rack application with.&lt;/p&gt;

&lt;p&gt;Lets write a unit test that’ll test we can store an object in the session.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack/test&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rspec Rack Unit Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Methods&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RackSessionApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stores Hello World in saved_object&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;saved_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;rack.session&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:saved_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saved_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to get access to the session, we can use &lt;code&gt;Rack::Request&lt;/code&gt; that provides helper methods.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RackSessionApp&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:saved_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 15 Feb 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/ruby/rack/2015/02/15/rack-sessions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/ruby/rack/2015/02/15/rack-sessions.html</guid>
        
        
        <category>ruby</category>
        
        <category>rack</category>
        
      </item>
    
  </channel>
</rss>
