<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Jordan - Blog</title>
    <description>Welcome to my blog. I am a Resident Apprentice at 8th Light in London.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 26 Jul 2015 20:05:10 +0100</pubDate>
    <lastBuildDate>Sun, 26 Jul 2015 20:05:10 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Loosely Coupled Testing</title>
        <description>&lt;p&gt;Test Driven Development has a huge amount of benefits, but one that stands out to me is how it helps unify a team. After I have finished test driving some new code, I leave behind a suite of unit tests that the whole team can value from. This suite of tests asserts that the code I have written is (to the best of my abilities) correct. If someone else in the team wants to work on my code, they can use my suite of unit tests as a safety net that’ll catch any erroneous changes.&lt;/p&gt;

&lt;p&gt;However, there is a risk that this safety net can become too tightly entangled around our code. Things like overusing mocking libraries and unit tests that possess too much knowldge of the system can in fact make the code more cumbersome to work with. Software is in a perpetual state of flux, and we need to be aware of the importance give it the room it needs to evolve.&lt;/p&gt;

&lt;p&gt;Before we move on, I would suggest you read The Little Mocker, as I have used the vocabulary that is defined there to differentiate between test doubles/mocks/stubs/fakes/spies and so on.&lt;/p&gt;

&lt;h1 id=&quot;mocking-collaborators&quot;&gt;Mocking Collaborators&lt;/h1&gt;

&lt;p&gt;One of the fundamental axioms of object oriented programming is for objects to work together with other objects. If it wasn’t for this, we will be back to doing procedural programming. This has a profound effect on how we do our testing. When we are test driving a new class X that depends on class Y, then the test for class X also needs to be aware of this dependency.&lt;/p&gt;

&lt;p&gt;Example Time. We are working on a &lt;code&gt;CinemaClient&lt;/code&gt; class that is going to be interacting with a &lt;code&gt;BoxOffice&lt;/code&gt; in order to check ticket availability/book tickets.&lt;/p&gt;

&lt;p&gt;When writing the test for &lt;code&gt;CinemaClient&lt;/code&gt;, we need to provide it the &lt;code&gt;BoxOffice&lt;/code&gt; class as well. Unfortunately, the &lt;code&gt;BoxOffice&lt;/code&gt; has a load of its own dependencies, so we can’t easily use the real &lt;code&gt;BoxOffice&lt;/code&gt; class in the unit test for our &lt;code&gt;BoxOffice&lt;/code&gt;. Instead, we will be providing a test double that pretends to be the &lt;code&gt;BoxOffice&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There’s a few ways we can do this, but the more common way that I have observed is to use a mocking library, e.g. JMock/Mockito for Java, rspec-mocks for Ruby. The reason why this approach is so common is because it is relatively quick and easy to do. For example, to stub the box office into returning zero availability, we can do something as follows;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;searches for availability from box office&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_box_office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:get_availability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;available_seats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cinema_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_availability&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test knows quite a lot of information with respect to the implementation of our &lt;code&gt;CinemaClient&lt;/code&gt;. It knows which methods get invoked when the cinema client is finding ticket availability, and is knowledgeable of the response that &lt;code&gt;box_office.get_availability&lt;/code&gt; is going to be returning.&lt;/p&gt;

&lt;p&gt;It turns our that &lt;code&gt;get_availability&lt;/code&gt; method on the &lt;code&gt;BoxOffice&lt;/code&gt; is widely used across the system, and the mock setup we have used in the above test is now being copied all over the place. What happens when &lt;code&gt;get_availability&lt;/code&gt; undergoes some kind of change? What happens if the return value changes from a Hash to some other data type? It is true that a lot of the production code will need changing if this were to happen, but now the tests must also all be painstakingly updated to incorporate the change.&lt;/p&gt;

&lt;p&gt;Another disadvantage to using mocking libraries is the amount of test setup that they can require. For e.g, let’s say testing a class that interacts with &lt;code&gt;BoxOffice&lt;/code&gt;, but we aren’t explicitly testing those interactions in all of the tests. We want create a stub that returns canned data as follows;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:get_availability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;availability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:reserve_tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:book_tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; 

&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cinema_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CinemaClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;finds availability&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cinema_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_availability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;reserves tickets&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box_office&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:reserve_tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Terminator Genesis&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cinema_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reserve_tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;books tickets&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cinema_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;book_tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:booked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There’s quite a lot of test setup here to ensure that all three tests pass. You may imagine this &lt;code&gt;before&lt;/code&gt; block getting unweildy as more and more changes are added.&lt;/p&gt;

&lt;p&gt;So, what is the alternative?&lt;/p&gt;

&lt;p&gt;We can hand roll a &lt;code&gt;FakeBoxOffice&lt;/code&gt; class that can be used across all classes.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeBoxOffice&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_availability&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;available_seats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reserve_tickets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ticket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@reserved_tickets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ticket&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;book_tickets&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@booked_tickets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ticket&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You may be thinking that this is way more code than was defined when using mocking libraries, so what has this given us?  All mock behaviour in one place to start with. If we we need to change the return value of &lt;code&gt;get_availability&lt;/code&gt;, we only need to do it here.&lt;/p&gt;

&lt;p&gt;Some tests may want to &lt;code&gt;BoxOffice&lt;/code&gt; to have availability, some may not. We can create constructor methods that control this;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FakeBoxOffice&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;has_availability&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@availability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;movie&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Pixels&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;no_availability&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@availability&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how this now looks like in our unit test. Notice that we no longer have a load of mock setup that we don’t need.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cinema_client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CinemaClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FakeBoxOffice&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;no_availability&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;data&quot;&gt;Data&lt;/h1&gt;
&lt;p&gt;Talk about&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;test doubles being used, when we can use fixtures instead.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 29 Jun 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/testing/2015/06/29/2015-07-26-loosely-coupled-testing.html</link>
        <guid isPermaLink="true">http://yourdomain.com/testing/2015/06/29/2015-07-26-loosely-coupled-testing.html</guid>
        
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Test-Driven Development in Java - Handmade Mocks</title>
        <description>&lt;h2 id=&quot;test-driven-development-in-java---handmade-mocks&quot;&gt;Test-Driven Development in Java - Handmade mocks&lt;/h2&gt;

&lt;h1 id=&quot;mocking-in-unit-tests&quot;&gt;Mocking in unit tests&lt;/h1&gt;
&lt;p&gt;Mock objects are great when we are testing with objects that lie on the “boundaries” of an application. We can mock interactions with the following to create fast and manageable unit tests.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Databases&lt;/li&gt;
  &lt;li&gt;File Systems&lt;/li&gt;
  &lt;li&gt;Web Sockets&lt;/li&gt;
  &lt;li&gt;Message Queues&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mock objects are predominantly used to either create a stub that returns canned data, or to spy on the method invocations it has received from other objects.&lt;/p&gt;

&lt;p&gt;In the past, I would use mocking libraries as the primary way of defining mock objects, and I felt really productive whilst using them. Mocking in this way is very quick and straight forward, and there are times when their usage is ideal. Therefore, the purpose of this article isn’t to completely dissuade you from using them. The problem that I have observed is when developers become too dependent on mocking libraries (like I was), and it can cause unnecessary pain especially when it comes to change. Instead, there are cases where simply writing your own handmade mocks can result in unit tests that are far more decoupled from your collaborators.&lt;/p&gt;

&lt;p&gt;So, what is the problem with using mocking libraries?&lt;/p&gt;

&lt;h1 id=&quot;misplaced-behaviour&quot;&gt;Misplaced Behaviour&lt;/h1&gt;
&lt;p&gt;Lets pretend we are testing some class that is interacting with the file system. Our class is going to delete all files except for the newest file. We have decided to use iteration to undertake this task, which will look something like the following;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numberOfFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteOldestFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we are dealing with the file system, we want to mock this interaction. How would we mock this using a library like Mockito?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numberOfFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//return 2 during the first call&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;numberOfFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//return 1 on subsequent calls&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;deleteOldestFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//check deleteOldestFile was called&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The problem that we have to make an assumption as to how the &lt;code&gt;FileSystem&lt;/code&gt; works underneath. We either have to guess how the &lt;code&gt;FileSystem&lt;/code&gt; handles file deletions, or we have to peak into how &lt;code&gt;FileSystem&lt;/code&gt; works. Either way, that behaviour does not really belong in the unit test we are currently writing. This test has become highly coupled to the implementation of the &lt;code&gt;FileSystem&lt;/code&gt;. Any changes to the &lt;code&gt;FileSystem&lt;/code&gt; may result in changes to this class.&lt;/p&gt;

&lt;h1 id=&quot;duplication&quot;&gt;Duplication&lt;/h1&gt;
&lt;p&gt;Another problem with mocking libraries is duplication of mock behaviour. If we were to read a file from the &lt;code&gt;FileSystem&lt;/code&gt;, we could stub out that interaction as follows;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;testFile.txt&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;TestFileContent&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Very straight forward. On the other hand you may imagine the &lt;code&gt;FileSystem&lt;/code&gt; being used in many places to read files, and therefore this mocked behaviour may be duplicated in lots of different unit tests.&lt;/p&gt;

&lt;p&gt;Once again, the unit test is tightly coupled to the &lt;code&gt;FileSystem&lt;/code&gt;. If our &lt;code&gt;FileSystem&lt;/code&gt; class were to change, then you would have to drill into multiple unit tests to make that change. This would lead to unnecessary developer effort that could be better spent elsewhere.&lt;/p&gt;

&lt;h2 id=&quot;handmade-mocks&quot;&gt;Handmade mocks&lt;/h2&gt;
&lt;p&gt;The issues I have highlighted are really down to duplication/tight coupling between unit test and collaborator. To make our unit tests react to change more comfortably, we can create out own handmade mock objects instead. Mock objects are easily reusable and all of the mock behaviour is contained within one place.&lt;/p&gt;

&lt;p&gt;Going back to our &lt;code&gt;FileSystem&lt;/code&gt;, we could create our own mock implementation which could pretend to read files as follows;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockFileSystem&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MockFileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockFileSystem&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWithFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MockFileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This &lt;code&gt;MockFileSystem&lt;/code&gt; can be reused across all unit tests needing access to the file system. If the behaviour of the file system were to change, for example we now want to use the &lt;code&gt;java.io.File&lt;/code&gt; class to identify files instead of a &lt;code&gt;String&lt;/code&gt;, we have far fewer places to change compared to mock behaviour being defined across many unit tests.&lt;/p&gt;

&lt;p&gt;All we are doing doing here is standard object oriented programming, and we can make the mock objects as expressive as we want.&lt;/p&gt;

&lt;h1 id=&quot;handmade-spies&quot;&gt;Handmade Spies&lt;/h1&gt;
&lt;p&gt;Another function that mocking libraries provide is the ability to check whether or not a method on a mock object was called correctly.&lt;/p&gt;

&lt;p&gt;Going back to our file system, lets add a new method to delete a file. We will want to make sure that this method was invoked correctly.&lt;/p&gt;

&lt;p&gt;Let us extend on &lt;code&gt;FileSystem&lt;/code&gt;, this time recording what files were deleted. We will also delete the file from our MockFileSystem to ensure it is kept consistent with the real file system.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockFileSystem&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FileSystem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deletedFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MockFileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;files&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;deletedFiles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MockFileSystem&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createWithFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MockFileSystem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;deletedFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDeletedFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deletedFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In our unit tests, we can now use the &lt;code&gt;getDeletedFiles()&lt;/code&gt; method to check that a particular file was in fact deleted.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Mocking libraries can be useful for times when duplication isn’t going to be an issue and the mock behaviour is simple. However if you find that you are duplicating mock behaviour in many unit tests, or your mock objects are non-trivial, then handmade mock objects may be a better option. In my experience, I’ve found them to be a better option for protecting your unit tests against change.&lt;/p&gt;
</description>
        <pubDate>Mon, 29 Jun 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/java/2015/06/29/2015-06-26-hand-rolling-java-mocks.html</link>
        <guid isPermaLink="true">http://yourdomain.com/java/2015/06/29/2015-06-26-hand-rolling-java-mocks.html</guid>
        
        
        <category>java</category>
        
      </item>
    
      <item>
        <title>Checked Exceptions</title>
        <description>&lt;h1 id=&quot;checked-exceptions&quot;&gt;Checked Exceptions&lt;/h1&gt;

&lt;p&gt;For the past week, I have been writing a HTTP Web Server in Java. This is the first time I’ve really used Java since joining 8th Light and honestly, it hasn’t been a completely happy reunion. There’s lot of things with Java I do still like.&lt;/p&gt;

&lt;p&gt;However, there’s one thing that really bothered me this week, and that was the fact that checked exceptions are still very prevalent in the language. For example, any interaction with any IO, e.g. reading/writing files, working with streams and readers, all seem to throw checked IOExceptions.&lt;/p&gt;

&lt;p&gt;When I want to read from a file and an IOException occurs, I have three choices&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Re-throw the checked exception. This means that any dependencies now have to handle/re-throw the checked exception.&lt;/li&gt;
  &lt;li&gt;Handle the checked exception there and then, however this means multiple places are doing exception handling. This could result in duplication and SRP violations.&lt;/li&gt;
  &lt;li&gt;Wrap the checked exception in an unchecked exception, and ensure you handle that exception elsewhere. This is the option I usually go for as I’m now back in control of how to handle exceptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My main issues with checked exceptions, and in particular the checked IOException in Java, are as follows;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Exception handling everywhere in your code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With my HTTP Server, I composed an architecture such than whenever a runtime exception would occurred, that exception would bubble up the stack and will eventually be caught. Once caught, the server would return a 500 status code and log the error. One and only one place was doing that exception handling, and only one place needs to change if I want to change the exception handling.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ExceptionHandling.png&quot; alt=&quot;Exception Handling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though the exceptions were channelled to a single place, I still have this to do something like this whenever I work with IO;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UncheckedIOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes the code look somewhat clumsy and untidy.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Violating Open/Closed principle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you declare that a public method should throw a checked exception, that is very likely going to break everywhere that uses that method. The same occurs when you want to remove a checked exception from being thrown. Code should be closed for modification, yet when checked exceptions are introduced, suddenly you are forced to modify code that should not have any reason to change.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Violating Single Responsibility Principle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Classes/methods should have one reason to change. When you have your exception handling logic mixed in with your file reading logic, you now have two reasons to change. Furthermore, file reading could be considered fairly low level, whereas you may have some high level exception handling strategy (e.g. log the error) that you want to happen when an exception occurs. If you were to handle the error where it was thrown, your file reading classes now need a dependency to some logging functionality.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Difficulty in testing certain exceptions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The file system can be a problematic domain, especially with file permission issues, disc space issues, and so on. However simulating these file issues in a unit test isn’t trivial. What’s worse, different OS’s work with files differently, and an operation that fails on a Windows machine may work on a Linux machine. Furthermore, libraries such as Apache commons seems to try and minimize exceptions by occurring by creating files that do not exist, and so on. To properly test things like IOExceptions, we have to do a fair amount of setup in order to get the exception to be thrown.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Your application must have a well designed exception handling process baked into its core architecture. When you suppress checked exceptions and start only having runtime exceptions flowing in your system, the more control you have on your application.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jun 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/checked/exceptions/2015/06/09/checked-exceptions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/checked/exceptions/2015/06/09/checked-exceptions.html</guid>
        
        
        <category>checked</category>
        
        <category>exceptions</category>
        
      </item>
    
      <item>
        <title>The Walking Skeleton</title>
        <description>&lt;h1 id=&quot;the-walking-skeleton&quot;&gt;The Walking Skeleton&lt;/h1&gt;
&lt;p&gt;Starting a brand new, green field proect is an exciting time that few software development professionals get to experience as much as they’d like. Most of the time, we are working on projects that are in progress or in their maintenance period.&lt;/p&gt;

&lt;p&gt;Once you have captured all of the high level requirements, and have a reasonably good idea of what the project should end up like, now what? You’re ready to put the metaphorical pen to paper, or more accurately open up your favourite text editor to start writing some code.&lt;/p&gt;

&lt;p&gt;Most software projects are composed of several major components, for example a web application would have the front-end code (HTML, CSS, JS), the back-end code (Rails/Sinatra), the database (SQL, NoSQL).&lt;/p&gt;
</description>
        <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/05/22/project-startup.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/05/22/project-startup.html</guid>
        
        
      </item>
    
      <item>
        <title>Machine Learning - K-Nearest Neighbours</title>
        <description>&lt;h2 id=&quot;machine-learning---k-nearest-neighbours&quot;&gt;Machine Learning - K-Nearest Neighbours&lt;/h2&gt;

&lt;h1 id=&quot;classification-vs-regression&quot;&gt;Classification vs Regression&lt;/h1&gt;
&lt;p&gt;Before we begin, lets get some terminology out of the way.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Machine Learning: is essentially a piece of software that is able to receive some data and is able to make predictions using this data. The main types of algorithms used in machine learning are classification and regression.&lt;/li&gt;
  &lt;li&gt;Classification algorithms - Could something be this or that? If you were to apply for a mortgage and you gave the bank a load of your criteria (age, occupation, etc), they will say YES or NO as to whether or not they’ll lend you the money. The result of a classification algorithm is one of a set of possible outcomes.&lt;/li&gt;
  &lt;li&gt;Regression algorithms - What would be the value of this? If you had the heights/weights of 100 people, and plotted that data onto a graph, you could work out roughly guess how much a different person with a particular height would weigh. The result of a regression algorithm is typically a value that is calculated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;k-nearest-neighbours&quot;&gt;K-Nearest Neighbours&lt;/h1&gt;
&lt;p&gt;To describe what K-Nearest Neighbours is, let us use an an entirely plausable real world analogy. You are magically teleported to another part of the world, and are to continue your career as a software craftsmen there. However, during the teleportation process, you have somehow lost all of your previous programming knowledge. What a pity.&lt;/p&gt;

&lt;p&gt;Furthermore, the teleportation process has eradicated your ability to know multiple programming languages. You must now select one programming language and you’ll need to find a job with this single skill.&lt;/p&gt;

&lt;p&gt;Which programming langauge would you learn to maximise the chance of you finding a new job? What you may do is find out what language most of the companies in the local area are using, and learn that. How many of the nearest companies do you look at? 1? 2? K? You may see where I’m going with this. If 4 out of the 5 nearest companies in your area are all using Java, you may come to the realization that Java may be your best langauge to learn in order to find a new job. Like I said before, we are using an entirely plausable example here.&lt;/p&gt;

&lt;p&gt;What I’ve described here is a Classification algorithm, whereby you are selecting which class (or in this case, programming langauge) to choose from.&lt;/p&gt;

&lt;p&gt;K-Nearest Neighbours is split into two varieties, classification and regression.&lt;/p&gt;

&lt;p&gt;K-Nearest Neighbours Classification works as follows;&lt;/p&gt;

&lt;p&gt;Given the following graph;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.statsoft.com/portals/0/Support/KNNOverViewImageA.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select a query point on the graph (red point on the graph)&lt;/li&gt;
  &lt;li&gt;Select k number of data points that are closest to the query point.&lt;/li&gt;
  &lt;li&gt;We can determine that the value of the query point will likely be the most common that the other data points hold.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;K-Nearest Neighbours Regression works in a similar way. Instead, rather than using the most common value in the neighbourhood, you would typically use the average of the values in the neighbourhood instead.&lt;/p&gt;

&lt;p&gt;This algorithm can be applied in lots of dfferent areas. If you had a load of medical data for blood tests, you may expect a group of people with a particular disease to be clustered together if you were to plot that data in a graph.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/machine/learning/2015/05/22/k-nearest-neighbours.html</link>
        <guid isPermaLink="true">http://yourdomain.com/machine/learning/2015/05/22/k-nearest-neighbours.html</guid>
        
        
        <category>machine</category>
        
        <category>learning</category>
        
      </item>
    
      <item>
        <title>Have a Break</title>
        <description>&lt;h1 id=&quot;have-a-break&quot;&gt;Have a Break&lt;/h1&gt;
&lt;p&gt;I’m going to start this blog with a very obvious statement. &lt;em&gt;Software can be really hard&lt;/em&gt;. If you care about writing good software, you’ll find it far more difficult than someone who doesn’t care. The reason why software is hard is because most of the time, we are staring into the abyss and doing something we probably haven’t done before.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We are either working on a new project/feature where we are designing how the major components (or objects) will work together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are using a third-party library that we haven’t used before.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are writing some algorithm we haven’t attempted before&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are making some change to an existing application that we are not familiar with&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Software can at times feel like a voyage of discovery, whereby you’d have some vague idea of what you want to achieve but no exact plan on how to get there.&lt;/p&gt;

&lt;p&gt;As paradoxical as this may seem, the major part of software development isn’t actually writing code. It’s thinking about how to write code.&lt;/p&gt;

&lt;p&gt;This is how it should be. If you are typing code very quickly without putting much thought into it, the chances are that your solutions will lack elegancy and be harder to work with later on.&lt;/p&gt;

&lt;p&gt;Because so much time is spent on thinking, it’s really important to take regular breaks. It’s hard to work at full efficiency for long durations without getting tired/lost in the problem we are trying to solve.&lt;/p&gt;

&lt;p&gt;This is particularly important if you are stuck on something. Many of us would have had those days whereby we are really stuck on a problem and are making no progress.&lt;/p&gt;

&lt;p&gt;When this is the case and we are under pressure, we feel that taking a break will lose us time and add to the stress.&lt;/p&gt;

&lt;p&gt;But in reality, when you are stuck for a long time, you get frustrated. You just want the thing to work now, you may have other tasks you wanted to get done today.&lt;/p&gt;

&lt;p&gt;When I’m at the point where I’m stuck and starting to feel the frustration, I stop what I’m doing. I go and play foosball or take a walk.&lt;/p&gt;

&lt;p&gt;When I come back a bit later, I feel I’m more able to tackle the problem at hand.&lt;/p&gt;

&lt;p&gt;How many times have you spent an entire day on a problem, got nowhere, and then the next morning you got it working in no time at all with a tiny amount of code?&lt;/p&gt;

&lt;p&gt;How many times have you had a eureka moment whilst in the shower?&lt;/p&gt;

&lt;p&gt;Because we spend so much of our time thinking whilst coding, it’s important to keep our minds fresh.&lt;/p&gt;

&lt;p&gt;Coding is not a mechical task, but an intellectual task, and is important that we are at our most effective whilst doing this.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/software/development/2015/04/27/have-a-break.html</link>
        <guid isPermaLink="true">http://yourdomain.com/software/development/2015/04/27/have-a-break.html</guid>
        
        
        <category>software</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Clojure - Responding to Change</title>
        <description>&lt;h2 id=&quot;clojure---responding-to-change&quot;&gt;Clojure - Responding to Change&lt;/h2&gt;

&lt;p&gt;One of the things that initially concerned me when working with Clojure is how data is spread across the entire application. For instance, with my clojure TicTacToe application, I had a &lt;code&gt;Board&lt;/code&gt; data structure which was a vector as follows;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[:X :X :X nil nil nil :O :O :O]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To test other functions across the application that used the Board, they had to be aware that a board was indeed a vector. There is no board abstraction. I always wondered what would happen if I wanted to represent the board with another data structure, for e.g. a list? How would that change ripple across the application?&lt;/p&gt;

&lt;p&gt;In an OO language, you would typically hide data behind some object abstraction and set it to private so that nothing else could access it. Therefore if you were to ever change the type of data stored, you can do so knowing that only the object that contains the data was referring to it. This means that change doesn’t permeate across the application.&lt;/p&gt;

&lt;p&gt;In order to have a clojure application that responds to change well, the data has to be owned by some namespace, and non-trivial operations on that data should be made available in this namespace.&lt;/p&gt;

&lt;p&gt;For example, if I had a &lt;code&gt;Board&lt;/code&gt; namespace, it’ll provide an empty vector (representing an empty board) for other functions/tests to work with, and all the functions required to work on that data. All other namespaces should use functions in the &lt;code&gt;Board&lt;/code&gt; namespace when working with this vector. You may choose to perform a function on the vector directly if the function is trivial and wouldn’t break if the vector were to change to some other data type (for instance, nil?).&lt;/p&gt;

&lt;p&gt;Unlike traditional OO languages, Clojure doesn’t have objects to contain private data, but there’s also a very small number of possible data structures that you can use. You have a hash-map/vector/list or some value (which would be strings, numbers, keywords, etc). Therefore if you were to change the data type, your choice is fairly limited.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/21/clojure-data-structures.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/21/clojure-data-structures.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Clojure - Stubbing Multimethod</title>
        <description>&lt;h2 id=&quot;clojure---stubbing-multimethod&quot;&gt;Clojure - Stubbing Multimethod&lt;/h2&gt;
&lt;p&gt;One way to achieve polymorpism in Clojure is to use &lt;a href=&quot;http://clojure.org/multimethods&quot;&gt;multimethods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With my TicTacToe application in Clojure, I have two different types of players, Human and Computer.&lt;/p&gt;

&lt;p&gt;To do the polymorphic dispatch, I have a dispatch method which picks out the &lt;code&gt;player_type&lt;/code&gt; value from the hash-map that is passed into it. For e.g, if I pass in &lt;code&gt;{:player_type :human}&lt;/code&gt;, it’ll look for the multimethod which has &lt;code&gt;:human&lt;/code&gt; label.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmulti &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player-types&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;player-types&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:player_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to call the method, you’d do something like this;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:player_type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will eventually delegate the method call to the following;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-move-logic-goes-here&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think this is really nice.&lt;/p&gt;

&lt;p&gt;Elsewhere, I have a &lt;code&gt;play-game&lt;/code&gt; function that runs through the entire game and keeps track of the current player.&lt;/p&gt;

&lt;p&gt;However, I don’t want to use my human-player code, nor do I want to use my computer-player code. I want to use a stub player instead, so I can control what the next move will be placed.&lt;/p&gt;

&lt;p&gt;In my unit test, I declare a new method that my multimethod can dispatch to;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepare-stub-player-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next-move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stub-player&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to use a stub player, firstly I pass in a player to my &lt;code&gt;play-turn&lt;/code&gt; function with the player_type &lt;code&gt;stub-player&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the unit test, prior to calling &lt;code&gt;play-turn&lt;/code&gt;, I just call &lt;code&gt;(prepare-stub-player-move some-move)&lt;/code&gt; to get the stub player to always return &lt;code&gt;some-move&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There we have it, stubbed multimethods in Clojure.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/20/stubbing-multimethod.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/20/stubbing-multimethod.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Doing the simplest thing possible</title>
        <description>&lt;h2 id=&quot;doing-the-simplest-thing-possible&quot;&gt;Doing the simplest thing possible&lt;/h2&gt;
&lt;p&gt;Since starting at 8th Light, there has been a strong emphasis on doing things the simplest possible way. This notion applies to many different areas of software engineering.&lt;/p&gt;

&lt;p&gt;When test driving a new piece of functionality, it is best to get into the habit of initially doing the simplest thing that can possible work. This can be challenging, as you will undoubtedly have an idea in your head how the code will look, and it is tempting to skip the trivial tests.&lt;/p&gt;

&lt;p&gt;Recently, I have been learning Clojure and writing my first TicTacToe application with it. Clojure is radically different from any other programming language that I’ve used thus far. It’s been difficult to get used to. At one point, I was attempting to come up with a &lt;code&gt;Player&lt;/code&gt; abstraction that can be dependency injected into a &lt;code&gt;Game&lt;/code&gt; class. I had done the same in Ruby and C# with ease, and has allowed me to inject either Human/Computer/Stub players.&lt;/p&gt;

&lt;p&gt;I really struggled getting this to work in a functional way, and struggled even more so trying to test this. After being stuck for some time, a colleague said to throw away the Player abstraction, hard code the player functionality into the game class, and refactor later. This was way easier to achieve, and despite violating SRP I had a working solution that can be cleaned up later on. “Make it work, then make it clean.”.&lt;/p&gt;

&lt;p&gt;I did the rest of the TicTacToe with the approach whereby I would just do the simplest thing possible, and I quickly cobbled together a game that was playable. Now there were issues and plenty of things to improve upon, but having a basic working game is a great thing to start with.&lt;/p&gt;

&lt;p&gt;Now that’s all well and good for something relatively basic like TicTacToe, but how does this approach work in the real world? In the past when I’ve joined software projects that are in their maturity and have a huge amount of complexity, I always wondered how such a system was ever designed and when all of this complexity was added.&lt;/p&gt;

&lt;p&gt;At the start of a software project, XP says that you should pick the most important stories that will force you to come up with the basic architecture that you want to work with. It also says that you only write the functionality that’ll make the selected stories work, and nothing else. This sounded a bit paradoxical initially, surely you want to come up with an architecture whereby new functionality can be easily added, and therefore you’d like to create the abstractions early on that’ll would make future changes trivial to introduce.&lt;/p&gt;

&lt;p&gt;It turns out that those preemptive abstractions are costly;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Coming up with the abstractions takes more effort.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having them in your application adds complexity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are not certain what changes exactly you’d need in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having leaky abstractions can cause future code to be coerced into using it, and could result in less elegant solutions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you keep code simple and clean, it will be easy to change. Trying to preempt change can at times be necessary if you think it will save time in the future, but usually it should be largely avoided.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/software/development/2015/04/14/simplest-thing-possible.html</link>
        <guid isPermaLink="true">http://yourdomain.com/software/development/2015/04/14/simplest-thing-possible.html</guid>
        
        
        <category>software</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Clojure First Impressions</title>
        <description>&lt;h2 id=&quot;clojure-first-impressions&quot;&gt;Clojure First Impressions&lt;/h2&gt;

&lt;p&gt;I’ve been working on Clojure for the last couple of days, and thus far it has made a big impression on me.&lt;/p&gt;

&lt;p&gt;I started off with the Clojure Koans, which I didn’t find particularly helpful. I found the nature of filling in the blanks a little too easy and not very educational.&lt;/p&gt;

&lt;p&gt;After this, I did several of the the &lt;a href=&quot;https://www.4clojure.com/&quot;&gt;4Clojure&lt;/a&gt; problems, which I found far more helpful in learning a new language, as you need to think a little more about what you are doing.&lt;/p&gt;

&lt;p&gt;With a few examples of 4Clojure done, I started on my TicTacToe and as I’ve done in the other OO programming languages, my first unit test was to create a Board object. I quickly realised how silly this was in a functional language, as there are no constructors in Clojure which I’m used to. In fact, although Clojure does give some options to work with state (i.e. atoms/refs), it seems the convention to not use instance variables that have their own state.&lt;/p&gt;

&lt;p&gt;I’m not so sure about this approach, as I’m so used to working with objects that contain state. It seems like I’m working with a bunch of static classes/methods in an OO language.&lt;/p&gt;

&lt;p&gt;However, because Clojure gives you so much flexibility when it comes to composing functions, it makes data feel like play-doh where I can mangle it anyway I please. This means that those ‘static’ methods can do a huge amount with a small amount of code.&lt;/p&gt;

&lt;p&gt;I’m using Midje as a testing library, and I’m finding it an excellent way of learning the language. It runs tests on file changes and displays readable output with colour, but it also has a REPL which I feel really helps improve workflow.&lt;/p&gt;

&lt;p&gt;With the OO languages I am used to working with, I strived towards having data behind some abstraction and only being able to access that data through methods on an object. That gives me the option to change the underlying data structure without affecting clients of that object.&lt;/p&gt;

&lt;p&gt;With Clojure, the data (hash maps, vectors, lists) are piped across the application instead. I’m concerned that changes will ripple across the application.&lt;/p&gt;

&lt;p&gt;I’m really looking forward to learning more about this language, and will post an update to see if my concerns that I’ve posted here were short-lived.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/09/clojure-first-impressions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/09/clojure-first-impressions.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
  </channel>
</rss>
