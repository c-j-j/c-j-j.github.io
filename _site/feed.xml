<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Jordan - Blog</title>
    <description>Welcome to my blog. I am a Resident Apprentice at 8th Light in London.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 20 Apr 2015 17:11:09 +0100</pubDate>
    <lastBuildDate>Mon, 20 Apr 2015 17:11:09 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Clojure - Stubbing Multimethod</title>
        <description>&lt;h2 id=&quot;clojure---stubbing-multimethod&quot;&gt;Clojure - Stubbing Multimethod&lt;/h2&gt;
&lt;p&gt;One way to achieve polymorpism in Clojure is to use &lt;a href=&quot;http://clojure.org/multimethods&quot;&gt;multimethods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With my TicTacToe application in Clojure, I have two different types of players, Human and Computer.&lt;/p&gt;

&lt;p&gt;To do the polymorphic dispatch, I have a dispatch method which picks out the &lt;code&gt;player_type&lt;/code&gt; value from the hash-map that is passed into it. For e.g, if I pass in &lt;code&gt;{:player_type :human}&lt;/code&gt;, it’ll look for the multimethod which has &lt;code&gt;:human&lt;/code&gt; label.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmulti &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player-types&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;player-types&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:player_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to call the method, you’d do something like this;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:player_type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will eventually delegate the method call to the following;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-move-logic-goes-here&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think this is really nice.&lt;/p&gt;

&lt;p&gt;Elsewhere, I have a &lt;code&gt;play-game&lt;/code&gt; function that runs through the entire game and keeps track of the current player.&lt;/p&gt;

&lt;p&gt;However, I don’t want to use my human-player code, nor do I want to use my computer-player code. I want to use a stub player instead, so I can control what the next move will be placed.&lt;/p&gt;

&lt;p&gt;In my unit test, I declare a new method that my multimethod can dispatch to;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepare-stub-player-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next-move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stub-player&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to use a stub player, firstly I pass in a player to my &lt;code&gt;play-turn&lt;/code&gt; function with the player_type &lt;code&gt;stub-player&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the unit test, prior to calling &lt;code&gt;play-turn&lt;/code&gt;, I just call &lt;code&gt;(prepare-stub-player-move some-move)&lt;/code&gt; to get the stub player to always return &lt;code&gt;some-move&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There we have it, stubbed multimethods in Clojure.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/20/stubbing-multimethod.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/20/stubbing-multimethod.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Doing the simplest thing possible</title>
        <description>&lt;h2 id=&quot;doing-the-simplest-thing-possible&quot;&gt;Doing the simplest thing possible&lt;/h2&gt;
&lt;p&gt;Since starting at 8th Light, there has been a strong emphasis on doing things the simplest possible way. This notion applies to many different areas of software engineering.&lt;/p&gt;

&lt;p&gt;When test driving a new piece of functionality, it is best to get into the habit of initially doing the simplest thing that can possible work. This can be challenging, as you will undoubtedly have an idea in your head how the code will look, and it is tempting to skip the trivial tests.&lt;/p&gt;

&lt;p&gt;Recently, I have been learning Clojure and writing my first TicTacToe application with it. Clojure is radically different from any other programming language that I’ve used thus far. It’s been difficult to get used to. At one point, I was attempting to come up with a &lt;code&gt;Player&lt;/code&gt; abstraction that can be dependency injected into a &lt;code&gt;Game&lt;/code&gt; class. I had done the same in Ruby and C# with ease, and has allowed me to inject either Human/Computer/Stub players.&lt;/p&gt;

&lt;p&gt;I really struggled getting this to work in a functional way, and struggled even more so trying to test this. After being stuck for some time, a colleague said to throw away the Player abstraction, hard code the player functionality into the game class, and refactor later. This was way easier to achieve, and despite violating SRP I had a working solution that can be cleaned up later on. “Make it work, then make it clean.”.&lt;/p&gt;

&lt;p&gt;I did the rest of the TicTacToe with the approach whereby I would just do the simplest thing possible, and I quickly cobbled together a game that was playable. Now there were issues and plenty of things to improve upon, but having a basic working game is a great thing to start with.&lt;/p&gt;

&lt;p&gt;Now that’s all well and good for something relatively basic like TicTacToe, but how does this approach work in the real world? In the past when I’ve joined software projects that are in their maturity and have a huge amount of complexity, I always wondered how such a system was ever designed and when all of this complexity was added.&lt;/p&gt;

&lt;p&gt;At the start of a software project, XP says that you should pick the most important stories that will force you to come up with the basic architecture that you want to work with. It also says that you only write the functionality that’ll make the selected stories work, and nothing else. This sounded a bit paradoxical initially, surely you want to come up with an architecture whereby new functionality can be easily added, and therefore you’d like to create the abstractions early on that’ll would make future changes trivial to introduce.&lt;/p&gt;

&lt;p&gt;It turns out that those preemptive abstractions are costly;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Coming up with the abstractions takes more effort.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having them in your application adds complexity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are not certain what changes exactly you’d need in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having leaky abstractions can cause future code to be coerced into using it, and could result in less elegant solutions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you keep code simple and clean, it will be easy to change. Trying to preempt change can at times be necessary if you think it will save time in the future, but usually it should be largely avoided.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/software/development/2015/04/14/simplest-thing-possible.html</link>
        <guid isPermaLink="true">http://yourdomain.com/software/development/2015/04/14/simplest-thing-possible.html</guid>
        
        
        <category>software</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Clojure First Impressions</title>
        <description>&lt;h2 id=&quot;clojure-first-impressions&quot;&gt;Clojure First Impressions&lt;/h2&gt;

&lt;p&gt;I’ve been working on Clojure for the last couple of days, and thus far it has made a big impression on me.&lt;/p&gt;

&lt;p&gt;I started off with the Clojure Koans, which I didn’t find particularly helpful. I found the nature of filling in the blanks a little too easy and not very educational.&lt;/p&gt;

&lt;p&gt;After this, I did several of the the &lt;a href=&quot;https://www.4clojure.com/&quot;&gt;4Clojure&lt;/a&gt; problems, which I found far more helpful in learning a new language, as you need to think a little more about what you are doing.&lt;/p&gt;

&lt;p&gt;With a few examples of 4Clojure done, I started on my TicTacToe and as I’ve done in the other OO programming languages, my first unit test was to create a Board object. I quickly realised how silly this was in a functional language, as there are no constructors in Clojure which I’m used to. In fact, although Clojure does give some options to work with state (i.e. atoms/refs), it seems the convention to not use instance variables that have their own state.&lt;/p&gt;

&lt;p&gt;I’m not so sure about this approach, as I’m so used to working with objects that contain state. It seems like I’m working with a bunch of static classes/methods in an OO language.&lt;/p&gt;

&lt;p&gt;However, because Clojure gives you so much flexibility when it comes to composing functions, it makes data feel like play-doh where I can mangle it anyway I please. This means that those ‘static’ methods can do a huge amount with a small amount of code.&lt;/p&gt;

&lt;p&gt;I’m using Midje as a testing library, and I’m finding it an excellent way of learning the language. It runs tests on file changes and displays readable output with colour, but it also has a REPL which I feel really helps improve workflow.&lt;/p&gt;

&lt;p&gt;With the OO languages I am used to working with, I strived towards having data behind some abstraction and only being able to access that data through methods on an object. That gives me the option to change the underlying data structure without affecting clients of that object.&lt;/p&gt;

&lt;p&gt;With Clojure, the data (hash maps, vectors, lists) are piped across the application instead. I’m concerned that changes will ripple across the application.&lt;/p&gt;

&lt;p&gt;I’m really looking forward to learning more about this language, and will post an update to see if my concerns that I’ve posted here were short-lived.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/09/clojure-first-impressions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/09/clojure-first-impressions.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Acceptance Testing with a DSL</title>
        <description>&lt;h2 id=&quot;acceptance-testing-with-a-dsl&quot;&gt;Acceptance Testing with a DSL&lt;/h2&gt;

&lt;p&gt;Whilst reading &lt;a href=&quot;http://www.amazon.co.uk/The-Clean-Coder-Professional-Programmers/dp/0137081073&quot;&gt;Clean Coder&lt;/a&gt; by Uncle Bob, there is one chapter dedicated to acceptance testing.&lt;/p&gt;

&lt;p&gt;In this chapter, he stresses on the importance of using a testing library such that acceptance scenarios can be written in plain English, and he recommends using a tool like Cucumber, Fitnesse, JBehave, etc.&lt;/p&gt;

&lt;p&gt;However, I disagree this this additional level of abstraction is always strictly necessary when it comes to acceptance testing.&lt;/p&gt;

&lt;p&gt;The argument for using acceptance tests written in plain English is that non technical employees can read and write them with a little amount of training.&lt;/p&gt;

&lt;p&gt;One has to question just how often non-technical people are actually writing these scenarios without developer assistance, and is it really their remit to even do so.&lt;/p&gt;

&lt;p&gt;Now there may be scenarios where plain English tests are preferable. For example, it could work for a team working on a mature application where there is a small amount of change to the core application, and instead most of the work is maintenance/additive. For these types of applications, most of the new features follow a particular pattern, and therefore plain English testing may be fairly easy to achieve.&lt;/p&gt;

&lt;p&gt;However, for applications not in their maturity, or for more complex applications where new features differentiate from each other, then I feel a well written DSL would work better. &lt;/p&gt;

&lt;p&gt;We should always strive to write beautiful code, whereby we compose functions/variables that clearly explain the intent of the software. We can (and should) make code readable to a non-technical person, and have high level policy separated from the low level details. A DSL can be readable to a non-technical person, yet have the advantage of flexibility and to be able to test complex scenarios easier than the plain English counterpart.&lt;/p&gt;

&lt;p&gt;To summarise, I don’t see a huge amount of difference between a well written DSL and a plain English testing library in terms of readability. Given that the majority of the time these tests will be written by developers themselves, the DSL has the advantage of being more flexible with less work.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/acceptance/testing/2015/04/08/acceptance-testing.html</link>
        <guid isPermaLink="true">http://yourdomain.com/acceptance/testing/2015/04/08/acceptance-testing.html</guid>
        
        
        <category>acceptance</category>
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Developing C# with vim on OSX</title>
        <description>&lt;h2 id=&quot;developing-c-with-vim-on-osx&quot;&gt;Developing C# with vim on OSX&lt;/h2&gt;
&lt;p&gt;This guide will explain how I have setup a C# development environment using vim on OSX.&lt;/p&gt;

&lt;h1 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h1&gt;
&lt;p&gt;The following need to be installed onto your computer beforehand.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.mono-project.com/&quot;&gt;Mono&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python 2.7&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;vim-setup&quot;&gt;Vim setup&lt;/h1&gt;

&lt;p&gt;We’ll be heavily using &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vim#installation&quot;&gt;omnisharp-vim&lt;/a&gt; in this guide.. This plugin provides a huge amount of features that facilitates C# development. To make full use of the features that omnisharp has to offer, the following plugins are needed;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;ctrlp&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;Syntastic&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tpope/vim-dispatch&quot;&gt;vim-dispatch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ervandew/supertab&quot;&gt;supertab&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;configuring-omnisharp-to-run-tests-with-nunit&quot;&gt;Configuring omnisharp to run tests with nunit&lt;/h1&gt;
&lt;p&gt;From the time of writing this, omnisharp is configured to expect &lt;code&gt;nunit-console.exe&lt;/code&gt; in your path somewhere. If this isn’t on your path, the nunit tests will silently fail to run. You have a choice with how to fix this;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the omnisharp plugin configuration and change the test command from using &lt;code&gt;nunit-console.exe&lt;/code&gt; to &lt;code&gt;nunit-console4&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In a directory that is on your path, create a symlink from nunit-console.exe to /Library/Frameworks/Mono.framework/Commands/nunit-console4&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personally, I prefer the second option as it gives me the freedom to reinstall the plugin if necessary without having to dig into the configuration. Furthermore, the &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-server/blob/0fc2fab6c44a19c6555248aa903c1e076afbd865/OmniSharp/config.json#L10&quot;&gt;location&lt;/a&gt; where the config.json is said to be stored is now out of date, and it is unclear which config.json in the plgunis directory structure you should use.&lt;/p&gt;

&lt;h1 id=&quot;configuring-vim-with-omnisharp-shortcuts&quot;&gt;Configuring vim with omnisharp shortcuts&lt;/h1&gt;
&lt;p&gt;You now have everything needed to open up a C# project in vim and be able to invoke omnisharp functions. However, you’ll need to make some amendments to your vim setup first to add some useful shortcuts. I would advise that you create a &lt;a href=&quot;http://vim.wikia.com/wiki/File_type_plugins&quot;&gt;file type plugin&lt;/a&gt; to dump this configuration into, so you can keep your .vimrc devoid of all of this c# configuration. Here’s what I’ve used, which I’ve yanked and slightly modified from &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vim#example-vimrc&quot;&gt;here&lt;/a&gt; to improve performance. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;OmniSharp won&amp;#39;t work without this setting&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tabstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shiftwidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expandtab&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;Showmatch significantly slows down omnicomplete&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;when the first match contains parentheses.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;noshowmatch&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;Super tab settings&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabDefaultCompletionType &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;context&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabContextDefaultCompletionType &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabDefaultCompletionTypeDiscovery &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;omnifunc:&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;completefunc:&amp;lt;c-x&amp;gt;&amp;lt;c-n&amp;gt;&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabClosePreviewOnPopupClose &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;don&amp;#39;t autoselect first item in omnicomplete, show if only one item (for preview)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;remove preview if you don&amp;#39;t want to see any documentation whatsoever.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;completeopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;longest&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;menuone&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;preview

&lt;span class=&quot;c&quot;&gt;&amp;quot;Move the preview window (code documentation) to the bottom of the screen, so it doesn&amp;#39;t move the code!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;You might also want to look at the echodoc plugin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;splitbelow&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Get Code Issues and syntax errors&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:syntastic_cs_checkers &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s1&quot;&gt;&amp;#39;syntax&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;semantic&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;issues&amp;#39;&lt;/span&gt;]

&lt;span class=&quot;c&quot;&gt;&amp;quot;Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;omnifunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;OmniSharp#Complete

&lt;span class=&quot;c&quot;&gt;&amp;quot; Synchronous build (blocks Vim)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:OmniSharpBuild&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Builds can also run asynchronously with vim-dispatch installed&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;b&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:OmniSharpBuildAsync&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; automatic syntax check on events (TextChanged requires Vim 7.4)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; SyntasticCheck
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; SyntasticSetLoclist

&lt;span class=&quot;c&quot;&gt;&amp;quot; Automatically add new cs files to the nearest project on save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; OmniSharp#AddToProject&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;The following commands are contextual, based on the current cursor position.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gd&lt;/span&gt; :OmniSharpGotoDefinition&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt; :OmniSharpFindImplementations&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ft&lt;/span&gt; :OmniSharpFindType&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fs&lt;/span&gt; :OmniSharpFindSymbol&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fu&lt;/span&gt; :OmniSharpFindUsages&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;finds members in the current buffer&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;fm :OmniSharpFindMembers&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;cursor can be anywhere on the line containing an issue&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt;  :OmniSharpFixIssue&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;fx :OmniSharpFixUsings&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;tt :OmniSharpTypeLookup&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;dc :OmniSharpDocumentation&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;rt :OmniSharpRunTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;rf :OmniSharpRunTestFixture&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ra :OmniSharpRunAllTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rl&lt;/span&gt; :OmniSharpRunLastTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Remove &amp;#39;Press Enter to continue&amp;#39; message when type information is longer than one line.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cmdheight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Contextual code actions (requires CtrlP or unite.vim)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ca :OmniSharpGetCodeActions&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Run code actions with text selected in visual mode to extract method&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;vnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ca :&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; OmniSharp#GetCodeActions&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;visual&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;&amp;quot; rename with dialog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;nnoremap &amp;lt;leader&amp;gt;nm :OmniSharpRename&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;nnoremap &amp;lt;F2&amp;gt; :OmniSharpRename&amp;lt;cr&amp;gt;:wa&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F2&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :OmniSharpRename&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; rename without dialog - with cursor on the symbol to rename... &amp;#39;:Rename newname&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;command! -nargs=1 Rename :call OmniSharp#RenameTo(&amp;quot;&amp;lt;args&amp;gt;&amp;quot;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Force OmniSharp to reload the solution. Useful when switching branches etc.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rl&lt;/span&gt; :OmniSharpReloadSolution&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cf&lt;/span&gt; :OmniSharpCodeFormat&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Load the current .cs file to the nearest project&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tp&lt;/span&gt; :OmniSharpAddToProject&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ss&lt;/span&gt; :OmniSharpStartServer&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sp&lt;/span&gt; :OmniSharpStopServer&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Add syntax highlighting for types and interfaces&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;th&lt;/span&gt; :OmniSharpHighlightTypes&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;Don&amp;#39;t ask to save when changing buffers (i.e. when jumping to a type definition)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;extract text selected in visual mode as variable&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;vnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ev cvariable&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;O&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;pIvar variable &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;A;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;==&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F2&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;setting-up-a-c-project&quot;&gt;Setting up a C# project&lt;/h1&gt;
&lt;p&gt;To setup a C# project without relying on visual studio/xamarin studio, we can use &lt;a href=&quot;https://github.com/nosami/grunt-init-csharpsolution&quot;&gt;grunt-init-csharpsolution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Creating a project is then as straight forward as navigating to an empty directory, and performing the following;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;grunt-init csharpsolution&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;nuget restore&lt;/code&gt; to install any dependencies&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-functionality-has-been-added&quot;&gt;What functionality has been added&lt;/h1&gt;
&lt;p&gt;Now that we have this all setup, what does all of this give us? Provided you have followed all of these instructions, we now have&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tab Autocomplete, which also shows which parameters a particular function expects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Project wide refactor. Press F2 to change a class/function/variable name and it’ll rename all instances in your project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asynchronous test runner. In a nunit test, either press &lt;code&gt;,ra&lt;/code&gt; to run all tests, &lt;code&gt;,rf&lt;/code&gt; to run all tests in a particular fixture, or &lt;code&gt;,rt&lt;/code&gt; to run a single test. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Context aware code actions. If you have configured Syntastic to work, you can hover over code shaded red/blue (which is Syntastic that indicating something is wrong), &lt;code&gt;,ca&lt;/code&gt; will provide ways you can fix this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to classes/functions using &lt;code&gt;gd&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These features have allowed me to come up with a pretty decent workflow for writing C# using vim. I would strongly recommend that you read through the omnisharp documentation to find out everything this great plugin has to offer.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/vim/2015/03/25/vim-with-c-sharp.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/2015/03/25/vim-with-c-sharp.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Packaging Principles - Coupling</title>
        <description>&lt;h1 id=&quot;package-coupling&quot;&gt;Package Coupling&lt;/h1&gt;
&lt;p&gt;When we create software components in the form of Java Jars, C# DLLs or Ruby gems, the two most important things that we want to get out of it are;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The ability to reuse components.&lt;/li&gt;
  &lt;li&gt;The ability to change components.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Reusable components are crucial to any software development team that wants to remain efficient. I’ve worked on projects where we have been able to put together new software applications that are mostly composed on existing components. This saves a lot of work when done right.&lt;/p&gt;

&lt;p&gt;There are three package coupling principles which I will go through in this blog post; The Acyclic Dependency Principle, the Stable Dependency Principle and the Stable Abstraction Principle.&lt;/p&gt;

&lt;h2 id=&quot;the-acyclic-dependency-principle&quot;&gt;The Acyclic Dependency Principle&lt;/h2&gt;
&lt;p&gt;The Acycling Dependency Principle (ADP) says that if component A depends on component B, component B will not have any transitive dependencies on component A.
I didn’t know that it was possible to violate this principle. With Java/Maven, you are (as far as I’m aware) not able to have any circular dependencies.&lt;/p&gt;

&lt;p&gt;Say we had the following contrived dependency structure;&lt;/p&gt;

&lt;p&gt;UserInterface -&amp;gt; Accounting -&amp;gt; StringUtils -&amp;gt; UserInterface&lt;/p&gt;

&lt;p&gt;If we were testing the Account component which handles business logic/accounting rules, we’d need to depend on StringUtils.&lt;/p&gt;

&lt;p&gt;Unfortunately, StringUtils is going to pull in the UserInterface dependencies too. So what is wrong with this?&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Compile times are going to increase, you now have to compile UserInterface (and all of its dependencies) whenever you compile Accounting.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;When you deploy the Accounting module, you will need to have the UserInterface component build for it to reference too.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are not able to yank out the Accounting component to reuse on a different application without Accounting carrying around its extra baggage.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-stable-dependency-principle&quot;&gt;The Stable Dependency Principle&lt;/h2&gt;
&lt;p&gt;When we are talking about components, stability is how easy it is to change a component. It does not have anything to do with how buggy the component may be. One metaphor that Uncle Bob uses is a coin balancing on a table. This can be said to be unstable, you are easily able to change its state. The table on the other hand is sturdy, and is harder to change the state. Therefore, you can say the table is more stable than the coin.&lt;/p&gt;

&lt;p&gt;Going back to software, any component that has lots of components depending on it will be stable.&lt;/p&gt;

&lt;p&gt;If we had components X, Y and Z depending on A;&lt;/p&gt;

&lt;p&gt;(X, Y, Z) -&amp;gt; A&lt;/p&gt;

&lt;p&gt;A cannot change without cooperating with X, Y and Z, otherwise any change to A could break these components.&lt;/p&gt;

&lt;p&gt;So how do we have reusable components that can react to change? The answer is to only depend on more stable components, and that is the crux of the Stable Dependency Principle.&lt;/p&gt;

&lt;p&gt;Components which we expect to undergo many changes should have a minimum number of components depending on them. Components which we do not expect to change can have many components depending on them.&lt;/p&gt;

&lt;p&gt;How we know which components should be more stable is what the next principle refers to.&lt;/p&gt;

&lt;h2 id=&quot;the-stable-abstraction-principle&quot;&gt;The Stable Abstraction Principle&lt;/h2&gt;
&lt;p&gt;Lets say we had a class A that implements some interface. It should be obvious to say that we would expect more changes to occur in class A compared to the interface. Afterall, the interface is where high level abstractions reside and these abstractions tend to change less than their concrete implementations.&lt;/p&gt;

&lt;p&gt;With software components, the Stable Abstraction Principle states that a component should be as stable as it is abstract.&lt;/p&gt;

&lt;p&gt;Abstract interfaces change less frequently than their concrete implementations, so we want the concrete implementations to depend on the abstractions.&lt;/p&gt;

&lt;p&gt;The advantage of this is that components that are highly depended upon are more abstract and therefore undergo less frequent changes. Components that are more concrete have less dependencies and therefore can change with more ease.&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/2015/03/24/package-coupling.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/03/24/package-coupling.html</guid>
        
        
      </item>
    
      <item>
        <title>Vim Projectionist</title>
        <description>&lt;p&gt;Vim: Projectionist&lt;/p&gt;

&lt;p&gt;A really useful plugin that I have recently been working with is &lt;a href=&quot;https://github.com/tpope/vim-projectionist&quot;&gt;vim projectionist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;What makes this particularly useful is the ability to quickly navigate to what it calls are “alternate” files.&lt;/p&gt;

&lt;p&gt;For e.g., I can open up a file lib/my_class.rb - type :A and it will navigate to spec/my_class_spec.rb. Beforehand, I would make heavy use of NERDTree/Ctrl-P to open new files.&lt;/p&gt;

&lt;p&gt;Instead of :A, you can type :AS (open up the alternate file in a horizontal split), :AV (vertical split), or :AT (new tab).&lt;/p&gt;

&lt;p&gt;There’s other things you can do as well. If you use &lt;a href=&quot;https://github.com/tpope/vim-dispatch&quot;&gt;vim dispatch&lt;/a&gt;, you can set default dispatch tasks.&lt;/p&gt;

&lt;p&gt;Here is .projections.json file I have configured for a ruby project;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;quot;make&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rake&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;spec/*_spec.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;dispatch&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;rspec {file}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;lib/{}.rb&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;lib/*.rb&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;alternate&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;spec/{}_spec.rb&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I’m on a file under &lt;code&gt;spec&lt;/code&gt; and I run &lt;code&gt;Dispatch&lt;/code&gt;, it’ll run rspec on the current file. If I’m on some production code under &lt;code&gt;lib&lt;/code&gt;, it’ll run the dispatch task on the alternate file, which in this case will run rspec on the spec.&lt;/p&gt;

&lt;p&gt;You can also setup tasks that start when a file is opened, i.e. &lt;code&gt;rails server&lt;/code&gt; if you are working on a rails project.&lt;/p&gt;
</description>
        <pubDate>Mon, 23 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/vim/2015/03/23/projectionist.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/2015/03/23/projectionist.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>Wrap external libraries</title>
        <description>&lt;p&gt;The other week, I was working on some JavaScript and needed to store some data on the client side, so I opted to use JQuery to save cookies rather than invent my own cookie storing mechanism.&lt;/p&gt;

&lt;p&gt;It transpired that cookies weren’t right for this task. What I needed was for each tab a user opened to have its own storage cache. &lt;/p&gt;

&lt;p&gt;I had to use SessionStorage instead, which does not persist data across different tabs.&lt;/p&gt;

&lt;p&gt;I was expecting this to be a laborious task as I had used cookies extensively in my web app. Yet, it was an insanely fast task. How?&lt;/p&gt;

&lt;p&gt;I had put the JQuery cookie methods in a separate &lt;code&gt;Storage&lt;/code&gt; class, which had the following methods;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Storage&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;storeItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;getItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I only had to change two lines of production code to change the storage mechanism for the entire site.&lt;/p&gt;

&lt;p&gt;I’ve done this far more lately. Wrapping any functions (third party or otherwise) that are called in several places in a class/helper function really helps when we have to change something.&lt;/p&gt;

&lt;p&gt;Only having to change one method like this is very satisfying and saves a lot of time.&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/software/2015/03/19/wrap-external-calls.html</link>
        <guid isPermaLink="true">http://yourdomain.com/software/2015/03/19/wrap-external-calls.html</guid>
        
        
        <category>software</category>
        
      </item>
    
      <item>
        <title>A tip to improve your vim</title>
        <description>&lt;p&gt;I was doing the coin change kata the other week, and one of the bits of feedback I received was that my Vim skills needed work.&lt;/p&gt;

&lt;p&gt;I thought my vim skills were okay, but I was actually using the H,J,K,L keys far too much. I was traversing documents just using k (up) and j (down) keys.&lt;/p&gt;

&lt;p&gt;Now, I have configured my Mac to repeat keys quickly when I hold the key down. However, vim provides many other ways to navigate around a document.&lt;/p&gt;

&lt;p&gt;So how do you get out of the habit of using H,J,K, L? It’s easy, disable those keys (temporarily). Now you can’t use them, you are forced to find other habits.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;nnoremap h &lt;nop&gt;&amp;lt;/code&amp;gt;
&lt;code&gt;nnoremap j &lt;nop&gt;&amp;lt;/code&amp;gt;
&lt;code&gt;nnoremap k &lt;nop&gt;&amp;lt;/code&amp;gt;
&lt;code&gt;nnoremap l &lt;nop&gt;&amp;lt;/code&amp;gt;&lt;/nop&gt;&lt;/code&gt;&lt;/nop&gt;&lt;/code&gt;&lt;/nop&gt;&lt;/code&gt;&lt;/nop&gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And habit is the key word here. I disabled these during a Friday afternoon, and I quickly had to change habits that I have since kept.&lt;/p&gt;

&lt;p&gt;These are crucial keys, it’s not practical to never use these keys. However they should only be used for one-off movements.&lt;/p&gt;

&lt;p&gt;Instead of using these keys, use;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;f/F to move to a character on a line&lt;/li&gt;
  &lt;li&gt;w/b to move back and forward a word&lt;/li&gt;
  &lt;li&gt;G5 to move to the 5th line, or use :5&lt;cr&gt;&lt;/cr&gt;&lt;/li&gt;
  &lt;li&gt;{,} to move one paragraph (which usually translates to a function)&lt;/li&gt;
  &lt;li&gt;/,? to find text to navigate to&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 17 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/vim/2015/03/17/vim_improvement.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/2015/03/17/vim_improvement.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
      <item>
        <title>How I violated the Interface Segregation Principle</title>
        <description>&lt;p&gt;Over the past few days I’ve been studying the SOLID principles, by watching the Clean Code videos as well as reading Principles, Patterns And Practices by Uncle Bob.&lt;/p&gt;

&lt;p&gt;Although I’ve known about the SOLID principles for quite some time, I never realised quite how far and wide the principles reach when you are writing code.&lt;/p&gt;

&lt;p&gt;For my first attempt at TicTacToe in Ruby, my code underwent many changes as new features were added. In hindsight, I did a poor job in keeping the abstractions correct as more features were added, and I ended up violating violating some of the SOLID principles in certain areas.&lt;/p&gt;

&lt;p&gt;In this post, I’ll describe how I violated the Interface Segregation Principle (ISP).&lt;/p&gt;

&lt;p&gt;ISP tells us that no classes should be forced to depend on methods it does not use.&lt;/p&gt;

&lt;p&gt;When you override a method in an interface to only return a null response, or throw a &lt;code&gt;NotToBeUsedException&lt;/code&gt; of some sort, you could be violating ISP.&lt;/p&gt;

&lt;p&gt;Initially, my TicTacToe used a CommandLineInterface, so I had an interface that looked like this;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInterface&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This worked fine for my CommandLineInterface, as when it was the human players turn, we requested that they enter their move.&lt;/p&gt;

&lt;p&gt;The next feature came along to add a GUI client. I reused this interface, but did the following;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MOVE_NOT_AVAILABLE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is undoubtedly a hack. With a GUI client, moves are not requested by the user, but instead the user submits a move when they are ready. The user drives the game forward and we used an event driven architecture to achieve this by using another function.&lt;/p&gt;

&lt;p&gt;The point is that CommandLineInterface and GUIInterface do not share the same behaviour all of the same behaviour. The GUI client is event driven with asynchronous behaviour, whereas the Command Line is a synchronous client which blocks the control flow when the user move is requested.&lt;/p&gt;

&lt;p&gt;So, how would we fix this? One way could be that we need two interfaces;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;synchronousInterface&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getUserMove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserInterface&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printOutcome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we have segregated the interfaces, the GUI interface can implement methods only included in the &lt;code&gt;UserInterface&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;ISP goes further than only overriding the required methods in an interface. Whenever you have some code that is forced to do something it doesn’t need to do, you could be violating ISP. This could be having to pass in parameters to a method that the method doesn’t require, or passing an unused parameter in a constructor.&lt;/p&gt;

&lt;p&gt;Hacks are easy things to do, especially when you’re in the zone and are just trying to get something working. The problem is they add up, and will add unnecessary confusion.&lt;/p&gt;
</description>
        <pubDate>Mon, 16 Mar 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/interface/segregation/principle/2015/03/16/isp-violation.html</link>
        <guid isPermaLink="true">http://yourdomain.com/interface/segregation/principle/2015/03/16/isp-violation.html</guid>
        
        
        <category>interface</category>
        
        <category>segregation</category>
        
        <category>principle</category>
        
      </item>
    
  </channel>
</rss>
