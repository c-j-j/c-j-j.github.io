<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Jordan - Blog</title>
    <description>Welcome to my blog. I am a Resident Apprentice at 8th Light in London.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 09 Jun 2015 16:24:26 +0100</pubDate>
    <lastBuildDate>Tue, 09 Jun 2015 16:24:26 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Checked Exceptions</title>
        <description>&lt;h1 id=&quot;checked-exceptions&quot;&gt;Checked Exceptions&lt;/h1&gt;

&lt;p&gt;For the past week, I have been writing a HTTP Web Server in Java. This is the first time I’ve really used Java since joining 8th Light and honestly, it hasn’t been a completely happy reunion. There’s lot of things with Java I do still like.&lt;/p&gt;

&lt;p&gt;However, there’s one thing that really bothered me this week, and that was the fact that checked exceptions are still very prevalent in the language. For example, any interaction with any IO, e.g. reading/writing files, working with streams and readers, all seem to throw checked IOExceptions.&lt;/p&gt;

&lt;p&gt;When I want to read from a file and an IOException occurs, I have three choices&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Re-throw the checked exception. This means that any dependencies now have to handle/re-throw the checked exception.&lt;/li&gt;
  &lt;li&gt;Handle the checked exception there and then, however this means multiple places are doing exception handling. This could result in duplication and SRP violations.&lt;/li&gt;
  &lt;li&gt;Wrap the checked exception in an unchecked exception, and ensure you handle that exception elsewhere. This is the option I usually go for as I’m now back in control of how to handle exceptions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My main issues with checked exceptions, and in particular the checked IOException in Java, are as follows;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Exception handling everywhere in your code.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With my HTTP Server, I composed an architecture such than whenever a runtime exception would occurred, that exception would bubble up the stack and will eventually be caught. Once caught, the server would return a 500 status code and log the error. One and only one place was doing that exception handling, and only one place needs to change if I want to change the exception handling.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/ExceptionHandling.png&quot; alt=&quot;Exception Handling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Even though the exceptions were channelled to a single place, I still have this to do something like this whenever I work with IO;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;someFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UncheckedIOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This makes the code look somewhat clumsy and untidy.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Violating Open/Closed principle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;When you declare that a public method should throw a checked exception, that is very likely going to break everywhere that uses that method. The same occurs when you want to remove a checked exception from being thrown. Code should be closed for modification, yet when checked exceptions are introduced, suddenly you are forced to modify code that should not have any reason to change.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Violating Single Responsibility Principle&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Classes/methods should have one reason to change. When you have your exception handling logic mixed in with your file reading logic, you now have two reasons to change. Furthermore, file reading could be considered fairly low level, whereas you may have some high level exception handling strategy (e.g. log the error) that you want to happen when an exception occurs. If you were to handle the error where it was thrown, your file reading classes now need a dependency to some logging functionality.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Difficulty in testing certain exceptions&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The file system can be a problematic domain, especially with file permission issues, disc space issues, and so on. However simulating these file issues in a unit test isn’t trivial. What’s worse, different OS’s work with files differently, and an operation that fails on a Windows machine may work on a Linux machine. Furthermore, libraries such as Apache commons seems to try and minimize exceptions by occurring by creating files that do not exist, and so on. To properly test things like IOExceptions, we have to do a fair amount of setup in order to get the exception to be thrown.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Your application must have a well designed exception handling process baked into its core achitecture. When you suppress checked exceptions and start only having runtime exceptions flowing in your system, the more control you have on your application.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Jun 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/checked/exceptions/2015/06/09/checked-exceptions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/checked/exceptions/2015/06/09/checked-exceptions.html</guid>
        
        
        <category>checked</category>
        
        <category>exceptions</category>
        
      </item>
    
      <item>
        <title>The Walking Skeleton</title>
        <description>&lt;h1 id=&quot;the-walking-skeleton&quot;&gt;The Walking Skeleton&lt;/h1&gt;
&lt;p&gt;Starting a brand new, green field proect is an exciting time that few software development professionals get to experience as much as they’d like. Most of the time, we are working on projects that are in progress or in their maintenance period.&lt;/p&gt;

&lt;p&gt;Once you have captured all of the high level requirements, and have a reasonably good idea of what the project should end up like, now what? You’re ready to put the metaphorical pen to paper, or more accurately open up your favourite text editor to start writing some code.&lt;/p&gt;

&lt;p&gt;Most software projects are composed of several major components, for example a web application would have the front-end code (HTML, CSS, JS), the back-end code (Rails/Sinatra), the database (SQL, NoSQL).&lt;/p&gt;
</description>
        <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/2015/05/22/project-startup.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/05/22/project-startup.html</guid>
        
        
      </item>
    
      <item>
        <title>Machine Learning - K-Nearest Neighbours</title>
        <description>&lt;h2 id=&quot;machine-learning---k-nearest-neighbours&quot;&gt;Machine Learning - K-Nearest Neighbours&lt;/h2&gt;

&lt;h1 id=&quot;classification-vs-regression&quot;&gt;Classification vs Regression&lt;/h1&gt;
&lt;p&gt;Before we begin, lets get some terminology out of the way.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Machine Learning: is essentially a piece of software that is able to receive some data and is able to make predictions using this data. The main types of algorithms used in machine learning are classification and regression.&lt;/li&gt;
  &lt;li&gt;Classification algorithms - Could something be this or that? If you were to apply for a mortgage and you gave the bank a load of your criteria (age, occupation, etc), they will say YES or NO as to whether or not they’ll lend you the money. The result of a classification algorithm is one of a set of possible outcomes.&lt;/li&gt;
  &lt;li&gt;Regression algorithms - What would be the value of this? If you had the heights/weights of 100 people, and plotted that data onto a graph, you could work out roughly guess how much a different person with a particular height would weigh. The result of a regression algorithm is typically a value that is calculated.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;k-nearest-neighbours&quot;&gt;K-Nearest Neighbours&lt;/h1&gt;
&lt;p&gt;To describe what K-Nearest Neighbours is, let us use an an entirely plausable real world analogy. You are magically teleported to another part of the world, and are to continue your career as a software craftsmen there. However, during the teleportation process, you have somehow lost all of your previous programming knowledge. What a pity.&lt;/p&gt;

&lt;p&gt;Furthermore, the teleportation process has eradicated your ability to know multiple programming languages. You must now select one programming language and you’ll need to find a job with this single skill.&lt;/p&gt;

&lt;p&gt;Which programming langauge would you learn to maximise the chance of you finding a new job? What you may do is find out what language most of the companies in the local area are using, and learn that. How many of the nearest companies do you look at? 1? 2? K? You may see where I’m going with this. If 4 out of the 5 nearest companies in your area are all using Java, you may come to the realization that Java may be your best langauge to learn in order to find a new job. Like I said before, we are using an entirely plausable example here.&lt;/p&gt;

&lt;p&gt;What I’ve described here is a Classification algorithm, whereby you are selecting which class (or in this case, programming langauge) to choose from.&lt;/p&gt;

&lt;p&gt;K-Nearest Neighbours is split into two varieties, classification and regression.&lt;/p&gt;

&lt;p&gt;K-Nearest Neighbours Classification works as follows;&lt;/p&gt;

&lt;p&gt;Given the following graph;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.statsoft.com/portals/0/Support/KNNOverViewImageA.jpg&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Select a query point on the graph (red point on the graph)&lt;/li&gt;
  &lt;li&gt;Select k number of data points that are closest to the query point.&lt;/li&gt;
  &lt;li&gt;We can determine that the value of the query point will likely be the most common that the other data points hold.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;K-Nearest Neighbours Regression works in a similar way. Instead, rather than using the most common value in the neighbourhood, you would typically use the average of the values in the neighbourhood instead.&lt;/p&gt;

&lt;p&gt;This algorithm can be applied in lots of dfferent areas. If you had a load of medical data for blood tests, you may expect a group of people with a particular disease to be clustered together if you were to plot that data in a graph.&lt;/p&gt;
</description>
        <pubDate>Fri, 22 May 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/machine/learning/2015/05/22/k-nearest-neighbours.html</link>
        <guid isPermaLink="true">http://yourdomain.com/machine/learning/2015/05/22/k-nearest-neighbours.html</guid>
        
        
        <category>machine</category>
        
        <category>learning</category>
        
      </item>
    
      <item>
        <title>Have a Break</title>
        <description>&lt;h1 id=&quot;have-a-break&quot;&gt;Have a Break&lt;/h1&gt;
&lt;p&gt;I’m going to start this blog with a very obvious statement. &lt;em&gt;Software can be really hard&lt;/em&gt;. If you care about writing good software, you’ll find it far more difficult than someone who doesn’t care. The reason why software is hard is because most of the time, we are staring into the abyss and doing something we probably haven’t done before.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;We are either working on a new project/feature where we are designing how the major components (or objects) will work together.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are using a third-party library that we haven’t used before.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are writing some algorithm we haven’t attempted before&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We are making some change to an existing application that we are not familiar with&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Software can at times feel like a voyage of discovery, whereby you’d have some vague idea of what you want to achieve but no exact plan on how to get there.&lt;/p&gt;

&lt;p&gt;As paradoxical as this may seem, the major part of software development isn’t actually writing code. It’s thinking about how to write code.&lt;/p&gt;

&lt;p&gt;This is how it should be. If you are typing code very quickly without putting much thought into it, the chances are that your solutions will lack elegancy and be harder to work with later on. &lt;/p&gt;

&lt;p&gt;Because so much time is spent on thinking, it’s really important to take regular breaks. It’s hard to work at full efficiency for long durations without getting tired/lost in the problem we are trying to solve.&lt;/p&gt;

&lt;p&gt;This is particularly important if you are stuck on something. Many of us would have had those days whereby we are really stuck on a problem and are making no progress.&lt;/p&gt;

&lt;p&gt;When this is the case and we are under pressure, we feel that taking a break will lose us time and add to the stress.&lt;/p&gt;

&lt;p&gt;But in reality, when you are stuck for a long time, you get frustrated. You just want the thing to work now, you may have other tasks you wanted to get done today. &lt;/p&gt;

&lt;p&gt;When I’m at the point where I’m stuck and starting to feel the frustration, I stop what I’m doing. I go and play foosball or take a walk. &lt;/p&gt;

&lt;p&gt;When I come back a bit later, I feel I’m more able to tackle the problem at hand.&lt;/p&gt;

&lt;p&gt;How many times have you spent an entire day on a problem, got nowhere, and then the next morning you got it working in no time at all with a tiny amount of code?&lt;/p&gt;

&lt;p&gt;How many times have you had a eureka moment whilst in the shower?&lt;/p&gt;

&lt;p&gt;Because we spend so much of our time thinking whilst coding, it’s important to keep our minds fresh.&lt;/p&gt;

&lt;p&gt;Coding is not a mechical task, but an intellectual task, and is important that we are at our most effective whilst doing this.&lt;/p&gt;
</description>
        <pubDate>Mon, 27 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/software/development/2015/04/27/have-a-break.html</link>
        <guid isPermaLink="true">http://yourdomain.com/software/development/2015/04/27/have-a-break.html</guid>
        
        
        <category>software</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Clojure - Responding to Change</title>
        <description>&lt;h2 id=&quot;clojure---responding-to-change&quot;&gt;Clojure - Responding to Change&lt;/h2&gt;

&lt;p&gt;One of the things that initially concerned me when working with Clojure is how data is spread across the entire application. For instance, with my clojure TicTacToe application, I had a &lt;code&gt;Board&lt;/code&gt; data structure which was a vector as follows;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;[:X :X :X nil nil nil :O :O :O]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To test other functions across the application that used the Board, they had to be aware that a board was indeed a vector. There is no board abstraction. I always wondered what would happen if I wanted to represent the board with another data structure, for e.g. a list? How would that change ripple across the application?&lt;/p&gt;

&lt;p&gt;In an OO language, you would typically hide data behind some object abstraction and set it to private so that nothing else could access it. Therefore if you were to ever change the type of data stored, you can do so knowing that only the object that contains the data was referring to it. This means that change doesn’t permeate across the application.&lt;/p&gt;

&lt;p&gt;In order to have a clojure application that responds to change well, the data has to be owned by some namespace, and non-trivial operations on that data should be made available in this namespace.&lt;/p&gt;

&lt;p&gt;For example, if I had a &lt;code&gt;Board&lt;/code&gt; namespace, it’ll provide an empty vector (representing an empty board) for other functions/tests to work with, and all the functions required to work on that data. All other namespaces should use functions in the &lt;code&gt;Board&lt;/code&gt; namespace when working with this vector. You may choose to perform a function on the vector directly if the function is trivial and wouldn’t break if the vector were to change to some other data type (for instance, nil?).&lt;/p&gt;

&lt;p&gt;Unlike traditional OO languages, Clojure doesn’t have objects to contain private data, but there’s also a very small number of possible data structures that you can use. You have a hash-map/vector/list or some value (which would be strings, numbers, keywords, etc). Therefore if you were to change the data type, your choice is fairly limited.&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/21/clojure-data-structures.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/21/clojure-data-structures.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Clojure - Stubbing Multimethod</title>
        <description>&lt;h2 id=&quot;clojure---stubbing-multimethod&quot;&gt;Clojure - Stubbing Multimethod&lt;/h2&gt;
&lt;p&gt;One way to achieve polymorpism in Clojure is to use &lt;a href=&quot;http://clojure.org/multimethods&quot;&gt;multimethods&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With my TicTacToe application in Clojure, I have two different types of players, Human and Computer.&lt;/p&gt;

&lt;p&gt;To do the polymorphic dispatch, I have a dispatch method which picks out the &lt;code&gt;player_type&lt;/code&gt; value from the hash-map that is passed into it. For e.g, if I pass in &lt;code&gt;{:player_type :human}&lt;/code&gt;, it’ll look for the multimethod which has &lt;code&gt;:human&lt;/code&gt; label.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmulti &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;get-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player-types&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                         &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;player-types&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:player_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to call the method, you’d do something like this;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:player_type&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will eventually delegate the method call to the following;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:human&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;get-move-logic-goes-here&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think this is really nice.&lt;/p&gt;

&lt;p&gt;Elsewhere, I have a &lt;code&gt;play-game&lt;/code&gt; function that runs through the entire game and keeps track of the current player.&lt;/p&gt;

&lt;p&gt;However, I don’t want to use my human-player code, nor do I want to use my computer-player code. I want to use a stub player instead, so I can control what the next move will be placed.&lt;/p&gt;

&lt;p&gt;In my unit test, I declare a new method that my multimethod can dispatch to;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defn &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;prepare-stub-player-move&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;next-move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;defmethod &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;player/get-move&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:stub-player&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;board&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;next-move&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to use a stub player, firstly I pass in a player to my &lt;code&gt;play-turn&lt;/code&gt; function with the player_type &lt;code&gt;stub-player&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the unit test, prior to calling &lt;code&gt;play-turn&lt;/code&gt;, I just call &lt;code&gt;(prepare-stub-player-move some-move)&lt;/code&gt; to get the stub player to always return &lt;code&gt;some-move&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There we have it, stubbed multimethods in Clojure.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/20/stubbing-multimethod.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/20/stubbing-multimethod.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Doing the simplest thing possible</title>
        <description>&lt;h2 id=&quot;doing-the-simplest-thing-possible&quot;&gt;Doing the simplest thing possible&lt;/h2&gt;
&lt;p&gt;Since starting at 8th Light, there has been a strong emphasis on doing things the simplest possible way. This notion applies to many different areas of software engineering.&lt;/p&gt;

&lt;p&gt;When test driving a new piece of functionality, it is best to get into the habit of initially doing the simplest thing that can possible work. This can be challenging, as you will undoubtedly have an idea in your head how the code will look, and it is tempting to skip the trivial tests.&lt;/p&gt;

&lt;p&gt;Recently, I have been learning Clojure and writing my first TicTacToe application with it. Clojure is radically different from any other programming language that I’ve used thus far. It’s been difficult to get used to. At one point, I was attempting to come up with a &lt;code&gt;Player&lt;/code&gt; abstraction that can be dependency injected into a &lt;code&gt;Game&lt;/code&gt; class. I had done the same in Ruby and C# with ease, and has allowed me to inject either Human/Computer/Stub players.&lt;/p&gt;

&lt;p&gt;I really struggled getting this to work in a functional way, and struggled even more so trying to test this. After being stuck for some time, a colleague said to throw away the Player abstraction, hard code the player functionality into the game class, and refactor later. This was way easier to achieve, and despite violating SRP I had a working solution that can be cleaned up later on. “Make it work, then make it clean.”.&lt;/p&gt;

&lt;p&gt;I did the rest of the TicTacToe with the approach whereby I would just do the simplest thing possible, and I quickly cobbled together a game that was playable. Now there were issues and plenty of things to improve upon, but having a basic working game is a great thing to start with.&lt;/p&gt;

&lt;p&gt;Now that’s all well and good for something relatively basic like TicTacToe, but how does this approach work in the real world? In the past when I’ve joined software projects that are in their maturity and have a huge amount of complexity, I always wondered how such a system was ever designed and when all of this complexity was added.&lt;/p&gt;

&lt;p&gt;At the start of a software project, XP says that you should pick the most important stories that will force you to come up with the basic architecture that you want to work with. It also says that you only write the functionality that’ll make the selected stories work, and nothing else. This sounded a bit paradoxical initially, surely you want to come up with an architecture whereby new functionality can be easily added, and therefore you’d like to create the abstractions early on that’ll would make future changes trivial to introduce.&lt;/p&gt;

&lt;p&gt;It turns out that those preemptive abstractions are costly;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Coming up with the abstractions takes more effort.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having them in your application adds complexity.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You are not certain what changes exactly you’d need in the future.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Having leaky abstractions can cause future code to be coerced into using it, and could result in less elegant solutions.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you keep code simple and clean, it will be easy to change. Trying to preempt change can at times be necessary if you think it will save time in the future, but usually it should be largely avoided.&lt;/p&gt;
</description>
        <pubDate>Tue, 14 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/software/development/2015/04/14/simplest-thing-possible.html</link>
        <guid isPermaLink="true">http://yourdomain.com/software/development/2015/04/14/simplest-thing-possible.html</guid>
        
        
        <category>software</category>
        
        <category>development</category>
        
      </item>
    
      <item>
        <title>Clojure First Impressions</title>
        <description>&lt;h2 id=&quot;clojure-first-impressions&quot;&gt;Clojure First Impressions&lt;/h2&gt;

&lt;p&gt;I’ve been working on Clojure for the last couple of days, and thus far it has made a big impression on me.&lt;/p&gt;

&lt;p&gt;I started off with the Clojure Koans, which I didn’t find particularly helpful. I found the nature of filling in the blanks a little too easy and not very educational.&lt;/p&gt;

&lt;p&gt;After this, I did several of the the &lt;a href=&quot;https://www.4clojure.com/&quot;&gt;4Clojure&lt;/a&gt; problems, which I found far more helpful in learning a new language, as you need to think a little more about what you are doing.&lt;/p&gt;

&lt;p&gt;With a few examples of 4Clojure done, I started on my TicTacToe and as I’ve done in the other OO programming languages, my first unit test was to create a Board object. I quickly realised how silly this was in a functional language, as there are no constructors in Clojure which I’m used to. In fact, although Clojure does give some options to work with state (i.e. atoms/refs), it seems the convention to not use instance variables that have their own state.&lt;/p&gt;

&lt;p&gt;I’m not so sure about this approach, as I’m so used to working with objects that contain state. It seems like I’m working with a bunch of static classes/methods in an OO language.&lt;/p&gt;

&lt;p&gt;However, because Clojure gives you so much flexibility when it comes to composing functions, it makes data feel like play-doh where I can mangle it anyway I please. This means that those ‘static’ methods can do a huge amount with a small amount of code.&lt;/p&gt;

&lt;p&gt;I’m using Midje as a testing library, and I’m finding it an excellent way of learning the language. It runs tests on file changes and displays readable output with colour, but it also has a REPL which I feel really helps improve workflow.&lt;/p&gt;

&lt;p&gt;With the OO languages I am used to working with, I strived towards having data behind some abstraction and only being able to access that data through methods on an object. That gives me the option to change the underlying data structure without affecting clients of that object.&lt;/p&gt;

&lt;p&gt;With Clojure, the data (hash maps, vectors, lists) are piped across the application instead. I’m concerned that changes will ripple across the application.&lt;/p&gt;

&lt;p&gt;I’m really looking forward to learning more about this language, and will post an update to see if my concerns that I’ve posted here were short-lived.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/clojure/2015/04/09/clojure-first-impressions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/clojure/2015/04/09/clojure-first-impressions.html</guid>
        
        
        <category>clojure</category>
        
      </item>
    
      <item>
        <title>Acceptance Testing with a DSL</title>
        <description>&lt;h2 id=&quot;acceptance-testing-with-a-dsl&quot;&gt;Acceptance Testing with a DSL&lt;/h2&gt;

&lt;p&gt;Whilst reading &lt;a href=&quot;http://www.amazon.co.uk/The-Clean-Coder-Professional-Programmers/dp/0137081073&quot;&gt;Clean Coder&lt;/a&gt; by Uncle Bob, there is one chapter dedicated to acceptance testing.&lt;/p&gt;

&lt;p&gt;In this chapter, he stresses on the importance of using a testing library such that acceptance scenarios can be written in plain English, and he recommends using a tool like Cucumber, Fitnesse, JBehave, etc.&lt;/p&gt;

&lt;p&gt;However, I disagree this this additional level of abstraction is always strictly necessary when it comes to acceptance testing.&lt;/p&gt;

&lt;p&gt;The argument for using acceptance tests written in plain English is that non technical employees can read and write them with a little amount of training.&lt;/p&gt;

&lt;p&gt;One has to question just how often non-technical people are actually writing these scenarios without developer assistance, and is it really their remit to even do so.&lt;/p&gt;

&lt;p&gt;Now there may be scenarios where plain English tests are preferable. For example, it could work for a team working on a mature application where there is a small amount of change to the core application, and instead most of the work is maintenance/additive. For these types of applications, most of the new features follow a particular pattern, and therefore plain English testing may be fairly easy to achieve.&lt;/p&gt;

&lt;p&gt;However, for applications not in their maturity, or for more complex applications where new features differentiate from each other, then I feel a well written DSL would work better. &lt;/p&gt;

&lt;p&gt;We should always strive to write beautiful code, whereby we compose functions/variables that clearly explain the intent of the software. We can (and should) make code readable to a non-technical person, and have high level policy separated from the low level details. A DSL can be readable to a non-technical person, yet have the advantage of flexibility and to be able to test complex scenarios easier than the plain English counterpart.&lt;/p&gt;

&lt;p&gt;To summarise, I don’t see a huge amount of difference between a well written DSL and a plain English testing library in terms of readability. Given that the majority of the time these tests will be written by developers themselves, the DSL has the advantage of being more flexible with less work.&lt;/p&gt;
</description>
        <pubDate>Wed, 08 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://yourdomain.com/acceptance/testing/2015/04/08/acceptance-testing.html</link>
        <guid isPermaLink="true">http://yourdomain.com/acceptance/testing/2015/04/08/acceptance-testing.html</guid>
        
        
        <category>acceptance</category>
        
        <category>testing</category>
        
      </item>
    
      <item>
        <title>Developing C# with vim on OSX</title>
        <description>&lt;h2 id=&quot;developing-c-with-vim-on-osx&quot;&gt;Developing C# with vim on OSX&lt;/h2&gt;
&lt;p&gt;This guide will explain how I have setup a C# development environment using vim on OSX.&lt;/p&gt;

&lt;h1 id=&quot;environment-setup&quot;&gt;Environment Setup&lt;/h1&gt;
&lt;p&gt;The following need to be installed onto your computer beforehand.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.mono-project.com/&quot;&gt;Mono&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Python 2.7&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;vim-setup&quot;&gt;Vim setup&lt;/h1&gt;

&lt;p&gt;We’ll be heavily using &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vim#installation&quot;&gt;omnisharp-vim&lt;/a&gt; in this guide.. This plugin provides a huge amount of features that facilitates C# development. To make full use of the features that omnisharp has to offer, the following plugins are needed;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/kien/ctrlp.vim&quot;&gt;ctrlp&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/scrooloose/syntastic&quot;&gt;Syntastic&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/tpope/vim-dispatch&quot;&gt;vim-dispatch&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ervandew/supertab&quot;&gt;supertab&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;configuring-omnisharp-to-run-tests-with-nunit&quot;&gt;Configuring omnisharp to run tests with nunit&lt;/h1&gt;
&lt;p&gt;From the time of writing this, omnisharp is configured to expect &lt;code&gt;nunit-console.exe&lt;/code&gt; in your path somewhere. If this isn’t on your path, the nunit tests will silently fail to run. You have a choice with how to fix this;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Navigate to the omnisharp plugin configuration and change the test command from using &lt;code&gt;nunit-console.exe&lt;/code&gt; to &lt;code&gt;nunit-console4&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;In a directory that is on your path, create a symlink from nunit-console.exe to /Library/Frameworks/Mono.framework/Commands/nunit-console4&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Personally, I prefer the second option as it gives me the freedom to reinstall the plugin if necessary without having to dig into the configuration. Furthermore, the &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-server/blob/0fc2fab6c44a19c6555248aa903c1e076afbd865/OmniSharp/config.json#L10&quot;&gt;location&lt;/a&gt; where the config.json is said to be stored is now out of date, and it is unclear which config.json in the plgunis directory structure you should use.&lt;/p&gt;

&lt;h1 id=&quot;configuring-vim-with-omnisharp-shortcuts&quot;&gt;Configuring vim with omnisharp shortcuts&lt;/h1&gt;
&lt;p&gt;You now have everything needed to open up a C# project in vim and be able to invoke omnisharp functions. However, you’ll need to make some amendments to your vim setup first to add some useful shortcuts. I would advise that you create a &lt;a href=&quot;http://vim.wikia.com/wiki/File_type_plugins&quot;&gt;file type plugin&lt;/a&gt; to dump this configuration into, so you can keep your .vimrc devoid of all of this c# configuration. Here’s what I’ve used, which I’ve yanked and slightly modified from &lt;a href=&quot;https://github.com/OmniSharp/omnisharp-vim#example-vimrc&quot;&gt;here&lt;/a&gt; to improve performance. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-vim&quot; data-lang=&quot;vim&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;quot;OmniSharp won&amp;#39;t work without this setting&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;filetype&lt;/span&gt; plugin &lt;span class=&quot;k&quot;&gt;on&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;tabstop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;shiftwidth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;expandtab&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;Showmatch significantly slows down omnicomplete&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;when the first match contains parentheses.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;noshowmatch&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;Super tab settings&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabDefaultCompletionType &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;context&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabContextDefaultCompletionType &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabDefaultCompletionTypeDiscovery &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;omnifunc:&amp;lt;c-x&amp;gt;&amp;lt;c-o&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;amp;completefunc:&amp;lt;c-x&amp;gt;&amp;lt;c-n&amp;gt;&amp;quot;&lt;/span&gt;]
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:SuperTabClosePreviewOnPopupClose &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;don&amp;#39;t autoselect first item in omnicomplete, show if only one item (for preview)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;remove preview if you don&amp;#39;t want to see any documentation whatsoever.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;completeopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;longest&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;menuone&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;preview

&lt;span class=&quot;c&quot;&gt;&amp;quot;Move the preview window (code documentation) to the bottom of the screen, so it doesn&amp;#39;t move the code!&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;You might also want to look at the echodoc plugin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;splitbelow&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Get Code Issues and syntax errors&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;g&lt;/span&gt;:syntastic_cs_checkers &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; [&lt;span class=&quot;s1&quot;&gt;&amp;#39;syntax&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;semantic&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;issues&amp;#39;&lt;/span&gt;]

&lt;span class=&quot;c&quot;&gt;&amp;quot;Set autocomplete function to OmniSharp (if not using YouCompleteMe completion plugin)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;omnifunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;OmniSharp#Complete

&lt;span class=&quot;c&quot;&gt;&amp;quot; Synchronous build (blocks Vim)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F5&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:OmniSharpBuild&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Builds can also run asynchronously with vim-dispatch installed&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;b&lt;/span&gt; :&lt;span class=&quot;k&quot;&gt;wa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;!&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;:OmniSharpBuildAsync&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; automatic syntax check on events (TextChanged requires Vim 7.4)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; SyntasticCheck
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; SyntasticSetLoclist

&lt;span class=&quot;c&quot;&gt;&amp;quot; Automatically add new cs files to the nearest project on save&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;autocmd&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;BufWritePost&lt;/span&gt; *.&lt;span class=&quot;k&quot;&gt;cs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; OmniSharp#AddToProject&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot;The following commands are contextual, based on the current cursor position.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;gd&lt;/span&gt; :OmniSharpGotoDefinition&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt; :OmniSharpFindImplementations&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ft&lt;/span&gt; :OmniSharpFindType&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;fs&lt;/span&gt; :OmniSharpFindSymbol&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fu&lt;/span&gt; :OmniSharpFindUsages&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;finds members in the current buffer&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;fm :OmniSharpFindMembers&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;cursor can be anywhere on the line containing an issue&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;x&lt;/span&gt;  :OmniSharpFixIssue&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;fx :OmniSharpFixUsings&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;tt :OmniSharpTypeLookup&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;dc :OmniSharpDocumentation&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;rt :OmniSharpRunTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;rf :OmniSharpRunTestFixture&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ra :OmniSharpRunAllTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rl&lt;/span&gt; :OmniSharpRunLastTests&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;nop&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Remove &amp;#39;Press Enter to continue&amp;#39; message when type information is longer than one line.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cmdheight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Contextual code actions (requires CtrlP or unite.vim)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ca :OmniSharpGetCodeActions&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Run code actions with text selected in visual mode to extract method&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;vnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ca :&lt;span class=&quot;k&quot;&gt;call&lt;/span&gt; OmniSharp#GetCodeActions&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;visual&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;&amp;quot; rename with dialog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;nnoremap &amp;lt;leader&amp;gt;nm :OmniSharpRename&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;nnoremap &amp;lt;F2&amp;gt; :OmniSharpRename&amp;lt;cr&amp;gt;:wa&amp;lt;cr&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F2&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; :OmniSharpRename&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; rename without dialog - with cursor on the symbol to rename... &amp;#39;:Rename newname&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;command! -nargs=1 Rename :call OmniSharp#RenameTo(&amp;quot;&amp;lt;args&amp;gt;&amp;quot;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Force OmniSharp to reload the solution. Useful when switching branches etc.&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;rl&lt;/span&gt; :OmniSharpReloadSolution&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cf&lt;/span&gt; :OmniSharpCodeFormat&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot; Load the current .cs file to the nearest project&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;tp&lt;/span&gt; :OmniSharpAddToProject&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; (Experimental - uses vim-dispatch or vimproc plugin) - Start the omnisharp server for the current solution&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ss&lt;/span&gt; :OmniSharpStartServer&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;sp&lt;/span&gt; :OmniSharpStopServer&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;quot; Add syntax highlighting for types and interfaces&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;nnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;th&lt;/span&gt; :OmniSharpHighlightTypes&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;cr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;Don&amp;#39;t ask to save when changing buffers (i.e. when jumping to a type definition)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;quot;extract text selected in visual mode as variable&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;vnoremap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;leader&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;ev cvariable&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;O&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;pIvar variable &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;A;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;esc&lt;span class=&quot;p&quot;&gt;&amp;gt;==&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;w&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;F2&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;hidden&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;setting-up-a-c-project&quot;&gt;Setting up a C# project&lt;/h1&gt;
&lt;p&gt;To setup a C# project without relying on visual studio/xamarin studio, we can use &lt;a href=&quot;https://github.com/nosami/grunt-init-csharpsolution&quot;&gt;grunt-init-csharpsolution&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Creating a project is then as straight forward as navigating to an empty directory, and performing the following;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;grunt-init csharpsolution&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;nuget restore&lt;/code&gt; to install any dependencies&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;what-functionality-has-been-added&quot;&gt;What functionality has been added&lt;/h1&gt;
&lt;p&gt;Now that we have this all setup, what does all of this give us? Provided you have followed all of these instructions, we now have&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tab Autocomplete, which also shows which parameters a particular function expects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Project wide refactor. Press F2 to change a class/function/variable name and it’ll rename all instances in your project.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Asynchronous test runner. In a nunit test, either press &lt;code&gt;,ra&lt;/code&gt; to run all tests, &lt;code&gt;,rf&lt;/code&gt; to run all tests in a particular fixture, or &lt;code&gt;,rt&lt;/code&gt; to run a single test. &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Context aware code actions. If you have configured Syntastic to work, you can hover over code shaded red/blue (which is Syntastic that indicating something is wrong), &lt;code&gt;,ca&lt;/code&gt; will provide ways you can fix this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Navigate to classes/functions using &lt;code&gt;gd&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;These features have allowed me to come up with a pretty decent workflow for writing C# using vim. I would strongly recommend that you read through the omnisharp documentation to find out everything this great plugin has to offer.&lt;/p&gt;
</description>
        <pubDate>Wed, 25 Mar 2015 00:00:00 +0000</pubDate>
        <link>http://yourdomain.com/vim/2015/03/25/vim-with-c-sharp.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/2015/03/25/vim-with-c-sharp.html</guid>
        
        
        <category>vim</category>
        
      </item>
    
  </channel>
</rss>
