<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Chris Jordan - Blog</title>
    <description>Welcome to my blog. I am a Resident Apprentice at 8th Light in London.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 10 Feb 2015 13:08:44 +0000</pubDate>
    <lastBuildDate>Tue, 10 Feb 2015 13:08:44 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Ruby and Rack: Working with session</title>
        <description>&lt;p&gt;Rack is a very simple web server interface which you can use to build small web apps. One of the things that I really like about Rack is how minimalistic it is, which makes it a lot less intimidating than other web frameworks (e.g. rails)&lt;/p&gt;

&lt;p&gt;This post will include a very small example on working with Rack’s session and how to unit test that the session has the correct values. &lt;/p&gt;

&lt;p&gt;To write unit tests for rack, you need to include &lt;code&gt;Rack::Test::Methods&lt;/code&gt;. This provides several useful utility methods to test your rack application with.&lt;/p&gt;

&lt;p&gt;Lets write a unit test that’ll test we can store an object in the session.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack/test&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rspec Rack Unit Test&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Methods&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;RackSessionApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;stores Hello World in saved_object&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;saved_object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;rack.session&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:saved_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;saved_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In order to get access to the session, we can use &lt;code&gt;Rack::Request&lt;/code&gt; that provides helper methods.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rack&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RackSessionApp&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:saved_object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello World&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;text/html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 15 Feb 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/ruby/rack/2015/02/15/rack-sessions.html</link>
        <guid isPermaLink="true">http://yourdomain.com/ruby/rack/2015/02/15/rack-sessions.html</guid>
        
        
        <category>ruby</category>
        
        <category>rack</category>
        
      </item>
    
      <item>
        <title>Vim: Refactoring class &amp; method names</title>
        <description>&lt;p&gt;I’m going to be honest with you, I switched from using IntelliJ to vim nearly a month ago, and there are still things I miss on an IDE. What makes IntelliJ so powerful is the ability to refactor and rename class/method names with one shortcut key. Admittidly, Java makes this easier for the IDE than a dynamic language like Ruby due to its static typing. However when you’re accustomed to an IDE doing all of the work for you, it can feel like an uphill struggle to switch over to vim.&lt;/p&gt;

&lt;p&gt;This post will be fairly short, and will cover a workflow I’ve found to work reasonably well when it comes to renaming class and method names in Ruby. Before we continue, I am aware that a lot of developers do successfully use sed to rename classes/methods. However I didn’t particularly like sed for two reasons;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You need to be careful when changing method names that are fairly common. For this reason, I sometimes want to check before each replacement. I’m assuming this is possible with sed, but I never got to that point. &lt;/li&gt;
  &lt;li&gt;I didn’t like having to come out of vim to edit the text that I am currently working with. It means I have to copy a method name to the clipboard, and paste that into sed later on.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The workflow that I am currently using is as follows, and works for renaming class and method names. Lets rename a method called ‘some_method’ to ‘new_method’;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Using the &lt;a href=&quot;https://github.com/tpope/vim-fugitive&quot;&gt;fugitive&lt;/a&gt; plug-in, place the cursor over the method you want to replace, and type &lt;code&gt;:Ggrep Control-R Control-W&amp;gt;&lt;/code&gt;. This uses git grep to search in your project for a particular string. Control-R Control W pastes in the word currently under the cursor. Quick tip: Create a keyboard mapping in your vimrc to do this, it’ll save you time later on.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Ggrep populates the quickfix list with all references to the string you just searched for. With the &lt;a href=&quot;https://github.com/nelstrom/vim-qargs&quot;&gt;qargs&lt;/a&gt; plugin installed, type &lt;code&gt;:Qargs&lt;/code&gt;. This will copy the Quickfix list into the vim arg list.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next, we will use the argdo command to perform a command on all files in the args list. Type the following to do the substitution &lt;code&gt;:argdo %s/some_method/new_method/gc&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The ‘c’ flag at the end is important, as you can decide whether or not you want to rename a particular string. Use the instructions prompted in vim to decide whether a particular string should be subsituted. &lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To rename a class, you first can follow the steps above the rename the ClassName and class_file_name, and then do the following to move the file such that git will track it;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Go to the file you want to rename&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Gmove path/to/destination.rb&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Mon, 02 Feb 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/vim/refactoring/2015/02/02/vim-refactoring.html</link>
        <guid isPermaLink="true">http://yourdomain.com/vim/refactoring/2015/02/02/vim-refactoring.html</guid>
        
        
        <category>vim</category>
        
        <category>refactoring</category>
        
      </item>
    
      <item>
        <title>TicTacToe: Extracting the winning lines with Ruby</title>
        <description>&lt;p&gt;In order for TicTacToe to work, you require some kind of mechanism to find out whether or not a player has won. I had a &lt;code&gt;Board&lt;/code&gt; object with a &lt;code&gt;winner&lt;/code&gt; and &lt;code&gt;won?&lt;/code&gt; method to work out whether or not there was a winner.&lt;/p&gt;

&lt;p&gt;My Board object consists of a 1D array called &lt;code&gt;positions&lt;/code&gt; which keeps track of which marks are present in which position. So a 3x3 board is a 9-element array, where the first element represents the top left position, and the last element represents the bottom right position.&lt;/p&gt;

&lt;p&gt;Initially, in order to find a winner, I had a simple loop that iterated across all possible winning configurations. For example I had the following array (of arrays), and found the winner by indexing &lt;code&gt;positions&lt;/code&gt; array and checked if the same mark existed on every position;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
WINNING POSITIONS = [[0, 1, 2], [3, 4, 5], [6, 7, 8], ...]
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This works fine for 3x3, but if you want to have a board with an arbitrary size, this doesn’t work. Instead of hard coding the winning positions, Ruby’s Enumerable Module provides some powerful ways of manipulating arrays.&lt;/p&gt;

&lt;p&gt;To extract the rows, the &lt;code&gt;each_slice&lt;/code&gt; method splits the array into slices by a particular size. Here, I split it into slices where the size is the square root of the number of positions on the board (i.e. a board with 9 positions will have a row size of 3)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rows&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@positions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;each_slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@positions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_a&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To extract the columns, the transpose method takes a 2d array, and swaps the rows and columns.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;columns&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transpose&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Diagonal lines are slightly trickier, but with the &lt;code&gt;collect&lt;/code&gt; method, you can build a new array to pull out the diagonal lines from &lt;code&gt;positions&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;diagonal_top_left&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;diagonal_top_right&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;collect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_index&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that you have all of these winning lines, you can use the &lt;code&gt;find&lt;/code&gt; method to find which line, if any, on the board has the same mark sitting on them. My winner method ended up looking something like this;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;winner&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;winning_line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winning_lines&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;all_equal?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;extract_mark_from_winning_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winning_line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winning_line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nil?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is I can create a board size with any size, and these methods will always be able to extract the correct winning lines.&lt;/p&gt;

&lt;p&gt;This blog post only scratches the surface regarding the methods which are available in the &lt;a href=&quot;http://ruby-doc.org/core-2.2.0/Enumerable.html&quot;&gt;Enumerable&lt;/a&gt; module, but it is well worth a read to see what is possible.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 Feb 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/tictactoe/ruby/2015/02/01/ruby-enumerable.html</link>
        <guid isPermaLink="true">http://yourdomain.com/tictactoe/ruby/2015/02/01/ruby-enumerable.html</guid>
        
        
        <category>tictactoe</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>TicTacToe: Validating User Input using Ruby Blocks</title>
        <description>When interacting with a user, it is important to validate all the user input that is coming in, and decide whether further input is required if the user has failed to provide valid input.&lt;br /&gt;&lt;br /&gt;With my TicTacToe game, there are several instances where user input is needed;&lt;br /&gt;&lt;br /&gt;1. Decide on game type (Human vs Human, Computer vs Human, etc)&lt;br /&gt;2. Decide on board size&lt;br /&gt;3. Pick move (integer from 1-9 for 3x3 board)&lt;br /&gt;&lt;br /&gt;I had coded 1 and 3 first, and initially had two very similar looking methods that had the following algorithm;&lt;br /&gt;&lt;br /&gt;while true&lt;br /&gt;&amp;nbsp; &amp;nbsp; input = get_user_input&lt;br /&gt;&amp;nbsp; &amp;nbsp; break if valid?(input)&lt;br /&gt;&amp;nbsp; &amp;nbsp; print invalid input message&lt;br /&gt;&lt;br /&gt;When I had written the third method, it was the 3rd strike and refactoring had to be done. The only part of the algorithm that varied for each method was the &lt;b&gt;valid() &lt;/b&gt;method, the rest was identical.&lt;br /&gt;&lt;br /&gt;In Java 8 I would pass a predicate to perform the validation. In Ruby, blocks seem to be a quick and ideal solution for this kind of refactoring. I want to invoke a method but wrap a piece of functionality into a surrounding algorithm.&lt;br /&gt;&lt;br /&gt;I was able to achieve this as follows;&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;white-space: pre-wrap; word-wrap: break-word;&quot;&gt;def get_validated_user_input&lt;br /&gt;  while true&lt;br /&gt;    input = get_user_input&lt;br /&gt;    break if yield(input)&lt;br /&gt;    print_invalid_message&lt;br /&gt;  end&lt;br /&gt;  input&lt;br /&gt;end&lt;br /&gt;&lt;br /&gt;user_move = get_validated_user_input {|input| move_valid?(input, board)}&lt;br /&gt;board_size = get_validated_user_input {|input| board_size_valid?(input, board_size_options)}&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;a href=&quot;https://gist.github.com/c-j-j/60a3d73548439bafaaf2#file-using-blocks-for-user-validation&quot;&gt;Using blocks for user validation&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Thu, 29 Jan 2015 01:05:00 -0800</pubDate>
        <link>http://yourdomain.com/2015/01/29/tictactoe-validating-user-input-using.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/01/29/tictactoe-validating-user-input-using.html</guid>
        
        
      </item>
    
      <item>
        <title>TicTacToe: A subtle difference between Minimax and Negamax</title>
        <description>TL/DR - The heuristic score returned from Minimax is based on the perspective of maximising player. The heuristic score from Negamax is based on the current player that is passed to the Negamax algorithm. &amp;nbsp;&lt;br /&gt;&lt;br /&gt;Yesterday afternoon I decided to change the core algorithm of my TicTacToe program from using&amp;nbsp;&lt;a href=&quot;http://en.wikipedia.org/wiki/Minimax&quot;&gt;Minimax&lt;/a&gt;&amp;nbsp;to use &lt;a href=&quot;http://en.wikipedia.org/wiki/Negamax&quot;&gt;Negamax&lt;/a&gt;. The algorithms look identical, Negamax is a similar but more concise algorithm that is ideal of a two-person turn taking game like TicTacToe.&lt;br /&gt;&lt;br /&gt;My Minimax algorithm worked just fine, and I had several unit tests ensuring that the computer player will pick the right moves, i.e.&lt;br /&gt;1. Win when possible&lt;br /&gt;2. Block when it has to&lt;br /&gt;3. Fork if possible.&lt;br /&gt;4. Start in the centre.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;I also had an integration test that checked two computer players always draw.&lt;br /&gt;&lt;br /&gt;However, my initial attempt at Negamax just wouldn&#39;t work and it consistently picked the wrong moves. This kind of recursive algorithm is difficult to break down into smaller parts without obfuscating the code just to make it easier to write tests for. My only option to debug this with print line statements and trying to dissect the code at various stages.&lt;br /&gt;&lt;br /&gt;After several hours of this, I was getting nowhere and gave up for the day. I decided to read the Negamax algorithm again, and there is a difference in how Minimax and Negamax work.&lt;br /&gt;&lt;br /&gt;With Minimax, you calculate the heuristic value of the node based on the maximizing player. In other words, when the game is over you calculate the score based on the computer player (lets call this player A) you are trying to calculate the next move for. If player A wins, return&amp;nbsp;+10, if player A loses, return -10, else return 0. We are only interested in calculating the score based on player&#39;s A perspective.&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #f9f9f9; border: 1px solid rgb(221, 221, 221); font-family: monospace, Courier; font-size: 14px; line-height: 1.3em; padding: 1em;&quot;&gt;&lt;b&gt;function&lt;/b&gt; minimax(node, depth, maximizingPlayer)&lt;br /&gt;    &lt;b&gt;if&lt;/b&gt; depth = 0 &lt;b&gt;or&lt;/b&gt; node is a terminal node&lt;br /&gt;        &lt;b&gt;return&lt;/b&gt; the heuristic value of node &lt;span style=&quot;color: red;&quot;&gt;//from perspective of player A&lt;/span&gt;&lt;br /&gt;    &lt;b&gt;if&lt;/b&gt; maximizingPlayer&lt;br /&gt;        bestValue := -∞&lt;br /&gt;        &lt;b&gt;for each&lt;/b&gt; child of node&lt;br /&gt;            val := minimax(child, depth - 1, FALSE)&lt;br /&gt;            bestValue := max(bestValue, val)&lt;br /&gt;        &lt;b&gt;return&lt;/b&gt; bestValue&lt;br /&gt;    &lt;b&gt;else&lt;/b&gt;&lt;br /&gt;        bestValue := +∞&lt;br /&gt;        &lt;b&gt;for each&lt;/b&gt; child of node&lt;br /&gt;            val := minimax(child, depth - 1, TRUE)&lt;br /&gt;            bestValue := min(bestValue, val)&lt;br /&gt;        &lt;b&gt;return&lt;/b&gt; bestValue&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My initial Negamax algorithm did the same thing, it calculated the score only based on Player A&#39;s perspective. However on Wikipedia the following is stated;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&quot;&lt;span style=&quot;background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;The negamax node&#39;s return value is a heuristic score from the point of view of the node&#39;s current player&quot;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;i&gt;&lt;span style=&quot;background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;background-color: white; color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;This was the issue, I&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;color: #252525; font-family: sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;should&#39;ve read it thoroughly the first time round without making an assumption about the scoring mechanism. I don&#39;t think the Wikipedia pseudocode makes this very clear, so here is the algorithm which I have now followed which works.&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #252525; font-family: sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;pre style=&quot;background-color: #f9f9f9; border: 1px solid rgb(221, 221, 221); font-family: monospace, Courier; font-size: 14px; line-height: 1.3em; padding: 1em;&quot;&gt;&lt;b&gt;function&lt;/b&gt; negamax(node, current_player)&lt;br /&gt;    &lt;b&gt;if&lt;/b&gt; node is a terminal node&lt;/pre&gt;&lt;pre style=&quot;background-color: #f9f9f9; border: 1px solid rgb(221, 221, 221); font-family: monospace, Courier; font-size: 14px; line-height: 1.3em; padding: 1em;&quot;&gt;&lt;span style=&quot;color: red;&quot;&gt;&lt;span style=&quot;line-height: 1.3em;&quot;&gt;        &lt;/span&gt;&lt;b style=&quot;line-height: 1.3em;&quot;&gt;return&lt;/b&gt;&lt;span style=&quot;line-height: 1.3em;&quot;&gt; the heuristic value of node based on current player&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;background-color: #f9f9f9; border: 1px solid rgb(221, 221, 221); font-family: monospace, Courier; font-size: 14px; line-height: 1.3em; padding: 1em;&quot;&gt;    bestValue := -∞&lt;br /&gt;    &lt;b&gt;foreach&lt;/b&gt; child of node&lt;br /&gt;        val := -negamax(child, other_player)&lt;br /&gt;        bestValue := max( bestValue, val )&lt;br /&gt;    &lt;b&gt;return&lt;/b&gt; bestValue&lt;br /&gt;&lt;/pre&gt;&lt;div&gt;&lt;span style=&quot;color: #252525; font-family: sans-serif;&quot;&gt;&lt;span style=&quot;font-size: 14px; line-height: 22px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;Therefore if you&amp;nbsp;are calculating the score for Player A, and the current player being called in Negamax is Player B, you calculate the score based on Player B&#39;s perspective.&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;color: #252525; font-family: sans-serif; font-size: 14px; line-height: 22px;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;</description>
        <pubDate>Tue, 27 Jan 2015 01:55:00 -0800</pubDate>
        <link>http://yourdomain.com/2015/01/27/tictactoe-subtle-difference-between.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/01/27/tictactoe-subtle-difference-between.html</guid>
        
        
      </item>
    
      <item>
        <title>TicTacToe: Being strict on your object dependencies</title>
        <description>One of the most difficult things that I&#39;ve had to adapt to whilst doing the TicTacToe exercise is having suitable dependencies between the various objects. I had put some effort into keeping objects decoupled, and my initial plan had a small design with neat single directional arrows from one object to another. However here&#39;s the object structure when I had finished developing the first version (In fact after reviewing this, there were even more dependencies between these objects);&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-M9m1PgyKVe8/VMJv9NnNAVI/AAAAAAAAABg/Gcu0h9g_bcg/s1600/TTT-Design1.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; src=&quot;http://2.bp.blogspot.com/-M9m1PgyKVe8/VMJv9NnNAVI/AAAAAAAAABg/Gcu0h9g_bcg/s1600/TTT-Design1.jpg&quot; height=&quot;320&quot; width=&quot;181&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;As we can see, many objects are dependent on each other, and things that shouldn&#39;t be coupled are linked. One example of this is the Board depending on the Player object. Initially this made perfect sense to me, a board should track the positions of players. The problem is the players are also aware of the board, so we have two objects that both depend on each other. Any change to the Player may result in a change to Board, and vice versa. The Board is more or less a data structure, yet now it is bound to one of the elements it is storing. What is the problem with this? Tightly coupled code is harder to change, and any large changes can lead to a substantial amount of unweaving so your tests are all green again. You may even have to perform some shotgun surgery.&lt;br /&gt;&lt;br /&gt;The thing I&#39;ve took away from this is that whenever you are passing one object (particularly when you are passing the object in as a method argument), you really need to think about how that couples the two objects. Draw out the dependencies and think about how changes to one object is going to affect another. It&#39;ll lead to less pain later on when you need to refactor your code.&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Fri, 23 Jan 2015 08:28:00 -0800</pubDate>
        <link>http://yourdomain.com/2015/01/23/tictactoe-being-strict-on-your-object.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/01/23/tictactoe-being-strict-on-your-object.html</guid>
        
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 22 Jan 2015 09:20:57 +0000</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/01/22/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/01/22/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Ruby : One does not simply overload methods</title>
        <description>One of the things I&#39;m enjoying the most when it comes to coding in ruby is the sheer variety of ways you can do a particular task. Coming from a Java background, having this flexible so far has been a joy.&lt;br /&gt;&lt;br /&gt;However, when I tried to do something that seemed so natural to me, which was overriding a method/constructor, ruby threw an error saying I hadn&#39;t provided the correct number of arguments.&lt;br /&gt;&lt;br /&gt;The following gist contains the first incorrect way in which I initially tried to do this;&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://gist.github.com/c-j-j/a253468ad2624e4973f7&quot;&gt;Github Gist&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Instead of defining two separate constructors/methods, you need to be more clever in your approach. You will instead need to define a single method/constructor and then use a splat operator or default values in order to expose different ways of invoking them. I feel this results in more complex single methods/constructors compared to &amp;nbsp;separate methods.</description>
        <pubDate>Wed, 21 Jan 2015 01:30:00 -0800</pubDate>
        <link>http://yourdomain.com/2015/01/21/ruby-one-does-not-simply-overload.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/01/21/ruby-one-does-not-simply-overload.html</guid>
        
        
      </item>
    
      <item>
        <title>Using hand-made mocks instead of a framework</title>
        <description>When I wrote predominantly Java code, I used JMock to mock dependencies in my unit tests. When working with simple interfaces where you expect the method to always return the same result, this works pretty well.&amp;nbsp;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;JMock however becomes more problematic when the objects you are mocking start to become a bit more complex. For example, if you want a mock object to respond differently to subsequent method calls, &amp;nbsp;you&#39;ll need to program that in using the mock libraries DSL.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;A far simpler approach is to build the mock objects yourself. It really doesn&#39;t take much effort to have a mock object with a queue of responses, whereby each invocation simply pops from the front of the queue. These hand made mock objects are very easy to write and understand, and do not require you to dive into a mock library&#39;s documentation to find the right incantation on how to achieve complex tasks.&lt;/div&gt;</description>
        <pubDate>Mon, 19 Jan 2015 09:26:00 -0800</pubDate>
        <link>http://yourdomain.com/2015/01/19/using-hand-made-mocks-instead-of.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/01/19/using-hand-made-mocks-instead-of.html</guid>
        
        
      </item>
    
      <item>
        <title>Book Review: Eloquent Ruby by Russ Olsen</title>
        <description>&lt;span style=&quot;color: #444444; font-family: Arial, Helvetica, sans-serif;&quot;&gt;Prior to joining 8th Light, I had only dabbled with Ruby by learning&amp;nbsp;the syntax online and doing a few coding katas in my spare time. Although the syntax is mostly easy to understand, the one thing that really concerned me back then is the sheer variety of ways you can achieve something in Ruby. Do you use do/end or curly braces for blocks? Do you include the brackets when invoking a method? Variety is indeed one of ruby&#39;s strengths, however to a beginner it is&amp;nbsp;somewhat difficult to&amp;nbsp;know which way is the most idiomatic style of coding, and that can make the language seem more difficult than it perhaps is.&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;color: #444444; font-family: Arial, Helvetica, sans-serif;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;color: #444444; font-family: Arial, Helvetica, sans-serif;&quot;&gt;Russ Olsen&#39;s Eloquent Ruby answered many of the questions I had asked myself when I originally looked at ruby several months ago. &amp;nbsp;Rather than just formally describing the whole Ruby syntax at the start of the book (which I have seen in many programming books), it is instead structured in sections that describe a certain part of the language (i.e. conditions, blocks, metaprogramming, etc). It describes what idiomatic Ruby code looks like, as well as the reason why rubyists choose to do things the way they do.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span style=&quot;color: #444444; font-family: Arial, Helvetica, sans-serif;&quot;&gt;Not only does it provide a gold mine of information, but its style is also highly engaging which makes it very easy to consume. I&#39;d highly recommend this to anyone who is just starting out on ruby and needs a bit of clarity on how to write idiomatic ruby.&amp;nbsp;&lt;/span&gt;</description>
        <pubDate>Fri, 16 Jan 2015 08:02:00 -0800</pubDate>
        <link>http://yourdomain.com/2015/01/16/book-review-eloquent-ruby-by-russ-olsen.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2015/01/16/book-review-eloquent-ruby-by-russ-olsen.html</guid>
        
        
      </item>
    
  </channel>
</rss>
